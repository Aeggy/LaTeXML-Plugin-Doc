<?xml version="1.0" encoding="UTF-8"?>
<?latexml searchpaths="/home/lenovo/Desktop/LaTeXML-Plugin-Doc/testing/WML"?>
<?latexml class="article"?>
<?latexml options="show" package="ed"?>
<?latexml package="amstext,amsmath,amssymb"?>
<?latexml package="graphicx"?>
<!-- %“usepackage–mdframed˝ -->
<!-- %“newenvironment–boxedquote˝–“begin–mdframed˝[leftmargin=1cm,rightmargin=1cm]˝–“end–mdframed˝˝ -->
<?latexml package="wrapfig,paralist"?>
<?latexml options="hyperref,style=alphabetic,backend=bibtex" package="biblatex"?>
<?latexml package="hyperref"?>
<?latexml RelaxNGSchema="LaTeXML"?>
<document xmlns="http://dlmf.nist.gov/LaTeXML" xml:id="Document">
  <resource src="LaTeXML.css" type="text/css"/>
  <resource src="ltx-article.css" type="text/css"/>
  <title>System Description: A Semantics-Aware LaTeX-to-Office Converter</title>
  <creator role="author">
    <personname>Lukas Kohlhase and Michael Kohlhase</personname>
  </creator>
  <abstract name="Abstract">
    <!-- %**** paper.tex Line 25 **** -->
    <p>We present a LaTeX-to-Office conversion plugin for  that can bridge the
divide between publication practices in the theoretical disciplines (LaTeX) and the
applied ones (predominantly Office). The advantage of this plugin over other converters
is that  conserves enough of the document- and formula structure, that the
transformed structures can be edited and processed further.</p>
  </abstract>
  <section refnum="1" xml:id="S1" labels="LABEL:sec:intro" fragid="S1">
    <title><tag close=" ">1</tag>Problem &amp; State of the Art</title>
    <para xml:id="S1.p1" fragid="S1.p1">
      <p>Technical documents from the STEM (<text framed="underline">S</text>cience, <text framed="underline">T</text>echnology,
<text framed="underline">E</text>ngineering, and <text framed="underline">M</text>athematics) fields augment the text with structured
objects – images, mathematical/chemical formulae, diagrams, and tables – that carry
essential parts of the information. There are two camps with different techniques for
authoring documents. The more theoretical disciplines (Mathematics, Physics, and Computer
Science) almost exclusively LaTeX, while the more applied ones (e.g. Life Sciences,
Chemistry, Engineering) use Office Suites almost exclusively. Transforming between these
two document formatting approaches is non-trivial: The TeX/LaTeX paradigm relies on
in-document macros to “program” documents, empowering authors to automate document
aspects and leading to community-supplied domain-specific extensions via LaTeX
packages. Office suites rely on document-styles that adapt visual parameters of the
underlying document markup either document-wide or for individual elements.</p>
    </para>
    <para xml:id="S1.p2" fragid="S1.p2">
      <p>This incompatibility of document preparation approaches causes friction in cross-paradigm
collaboration as each camp deems their approach vastly superior and the other’s
insufferable. In this paper, we will discuss the transformation from TeX/LaTeX to
<!-- %**** paper.tex Line 50 **** -->Office documents.</p>
    </para>
    <para xml:id="S1.p3" fragid="S1.p3">
      <graphics candidates="mathsnippet-libreoffice.png" graphic="mathsnippet-libreoffice" options="width=142.26378pt" xml:id="S1.p3.g1" fragid="S1.p3.g1" imagesrc="mathsnippet-libreoffice.png" imagewidth="178" imageheight="15"/>
      <break/>
    </para>
    <para xml:id="S1.p4" fragid="S1.p4">
      <p>There are several methods to transform papers from LaTeX to an office word
processor. The first method is to just generate a PDF file and then open this file in
Word/LibreOffice. This achieves the goal of looking like the desired PDF document, just in
Office. There are two problems with this route:</p>
      <enumerate xml:id="I1" fragid="I1">
        <item frefnum="1." refnum="1" xml:id="I1.i1" fragid="I1.i1">
          <tag>1.</tag>
          <para xml:id="I1.i1.p1" fragid="I1.i1.p1">
            <p>mathematical formulae are not preserved (see Figure <ref labelref="LABEL:fig:cnp" broken="1">LABEL:fig:cnp</ref>)</p>
          </para>
        </item>
        <item frefnum="2." refnum="2" xml:id="I1.i2" fragid="I1.i2">
          <tag>2.</tag>
          <para xml:id="I1.i2.p1" fragid="I1.i2.p1">
            <p>even if the result looks OK the results have lost their links (e.g. for
citations/references or label/ref), or become difficult to edit, because they do not
conform to the styling system of the word processor.</p>
          </para>
        </item>
      </enumerate>
      <p>The fundamental problem is that it converts the appearance of the document and loses
meaning due to macro expansion. This is especially blatant when looking at the math in a
document. Either it is treated as text, with no meaningful way to distinguish between math
and formatted text that happens to contain some mathematical symbols, making automatic
treatment of this kind of math difficult, or it is represented by an image of the relevant
formulae, which makes editing extremely impractical, if not impossible. The same holds true
for references, they are essentially treated as parts of text with a linked number in
front of them, complicating adding new references substantially.</p>
    </para>
    <para xml:id="S1.p5" fragid="S1.p5">
      <p>The other way of transforming LaTeX to Word, by transforming the LaTeX source file
<!-- %**** paper.tex Line 75 **** -->directly, avoids these problems. <text font="typewriter">latex2rtf</text> <cite>[]</cite> is a widely used
system that uses a custom parser to convert a non-trivial fragment of LaTeX to the RTF
format understood by most office systems. The system works well, but coverage is limited
by the LaTeX parser and the aging RTF format.  TeX4ht <cite>[]</cite>, which uses
the TeX parser itself and seeds the output with custom directives that are parsed to
create HTML has a post-processor that generates ODF. Its coverage of LaTeX is unlimited,
but the intermediate format HTML somewhat limits the range of document fragments that can
be generated.</p>
    </para>
    <para xml:id="S1.p6" fragid="S1.p6">
      <p>Here we present a similar approach, only that we extend the backend of the  system
to generate WML – the file format of MS Word – and ODT – that of Libre- and
OpenOffice. Like <text font="typewriter">latex2rdf</text>  directly parses LaTeX source files, but
the coverage of TeXis complete (including macro definitions) and semantics-preserving
bindings for the most important LaTeX packages are provided. The main difference to
TeX4ht is that</p>
    </para>
    <para xml:id="S1.p7" fragid="S1.p7">
      <p>generates an XML representation that is structurally near to the
LaTeX sources and preserves the author-supplied semantics for further processing.</p>
    </para>
  </section>
  <section refnum="2" xml:id="S2" labels="LABEL:sec:target" fragid="S2">
    <title><tag close=" ">2</tag>The Office Formats</title>
    <para xml:id="S2.p1" fragid="S2.p1">
      <p>WML and ODT follow the same architectural paradigm: they are both zip-packaged
directories; their contents and structure differ mainly in media types, XML document
types, and naming. We will use WML in our presentation here and point out differences in
ODT as we go along.
<!-- %**** paper.tex Line 100 **** --></p>
    </para>
  </section>
</document>
