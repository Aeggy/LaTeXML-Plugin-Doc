%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 42 344 464 654
%%Title: C:\Users\Oscar\Documents\My Dropbox\Optimal portfolio-consumption selection in models driven by marked point processes\Ejemplo numérico\Grafica.ps
%%Creator: GSview from C:\Users\Oscar\Documents\My Dropbox\Optimal portfolio-consumption selection in models driven by marked point processes\Ejemplo numérico\Grafica.ps
%%CreationDate: Mon Jun 09 20:04:49 2014
%%Pages: 1
%%EndComments
%%Page: 1 1
%%BeginDocument: C:\Users\Oscar\Documents\My Dropbox\Optimal portfolio-consumption selection in models driven by marked point processes\Ejemplo numérico\Grafica.ps
%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96dev Copyright 2007 Radical Eye Software
%%Title: C:/Users/Oscar/Documents/My Dropbox/Optimal portfolio-consumption selection in models driven by marked point processes/Ejemplo numérico/Grafica.dvi
%%CreationDate: Mon Jun 09 20:04:28 2014
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files (x86)\MiKTeX 2.7\miktex\bin\dvips.exe" -P pdf
%+ "C:/Users/Oscar/Documents/My Dropbox/Optimal portfolio-consumption selection in models driven by marked point processes/Ejemplo numérico/Grafica.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2014.06.09:2004
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 8000 8000
(C:/Users/Oscar/Documents/My Dropbox/Optimal portfolio-consumption selection in models driven by mar)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-7567 43268 a @beginspecial -28 @llx 173 @lly 640 @urx
618 @ury 5010 @rwi @setspecial
%%BeginDocument: Figure23.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.1.0.604 (R2013a). Operating System: Microsoft Windows 7.
%%Title: C:\Users\Oscar\Documents\My Dropbox\Optimal portfolio-consumption selection in models driven by marked point processes\Ejemplo numérico\Figure23.eps
%%CreationDate: 06/05/2014  10:02:43
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:   -28   173   640   618
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/ISOLatin1Encoding where {pop /WindowsLatin1Encoding 256 array bdef
ISOLatin1Encoding WindowsLatin1Encoding copy pop
/.notdef/.notdef/quotesinglbase/florin/quotedblbase/ellipsis/dagger
/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/.notdef/.notdef
/.notdef/.notdef/quoteleft/quoteright/quotedblleft/quotedblright/bullet
/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/.notdef/.notdef
/Ydieresis WindowsLatin1Encoding 128 32 getinterval astore pop}
{/WindowsLatin1Encoding StandardEncoding bdef} ifelse
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup
%%BeginDocument: mwb_cmmi10
%!PS-AdobeFont-1.0: mwb_cmmi10 1.100
%%Title: mwb_cmmi10
%Version: 1.100
%%CreationDate: Thu Jan 27 10:30:22 2011
%%Creator: Ben Hinkle
%Copyright: Copyright (C) 2011 MathWorks, Inc
% Generated by FontForge 20100429 (http://fontforge.sf.net/)
%%EndComments

10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /mwb_cmmi10 def
/FontBBox {18 -216 880 716 }readonly def
/PaintType 0 def
/FontInfo 8 dict dup begin
 /version (1.100) readonly def
 /Notice (Copyright \050C\051 2011 MathWorks, Inc) readonly def
 /FullName (mwb_cmmi10) readonly def
 /FamilyName (mwb_cmmi10) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle -14.04 def
 /isFixedPitch false def
 /ascent 750 def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0/.notdef               put
dup 2/Theta put
dup 3/Lambda put
dup 4/Xi put
dup 5/Pi put
dup 6/Sigma put
dup 7/Upsilon put
dup 8/Phi put
dup 9/Psi put
dup 10/Omega put
dup 11/alpha put
dup 12/beta put
dup 13/gamma put
dup 14/delta put
dup 15/epsilon1 put
dup 16/zeta put
dup 17/eta put
dup 18/theta put
dup 19/iota put
dup 20/kappa put
dup 21/lambda put
dup 22/mu put
dup 23/nu put
dup 24/xi put
dup 25/pi put
dup 26/rho put
dup 27/sigma put
dup 28/tau put
dup 29/upsilon put
dup 30/phi put
dup 31/chi put
dup 32/psi put
dup 127/tie put
dup 128/psi put
dup 160/space put
dup  33/Gamma put
dup  34/Delta put
dup  35/Theta put
dup  36/Lambda put
dup  37/Xi put
dup  38/Pi put
dup  39/Sigma put
dup  40/Upsilon put
dup  41/Phi put
dup  42/Psi put
dup  43/Omega put
dup  44/alpha put
dup  45/beta put
dup  46/gamma put
dup  47/delta put
dup  48/epsilon1 put
dup  49/zeta put
dup  50/eta put
dup  51/theta put
dup  52/iota put
dup  53/kappa put
dup  54/lambda put
dup  55/mu put
dup  56/nu put
dup  57/xi put
dup  58/pi put
dup  59/rho put
dup  60/sigma put
dup  61/tau put
dup  62/upsilon put
dup  63/phi put
dup  64/chi put
dup  65/psi put
dup  66/tie put
readonly def
currentdict end
currentfile eexec
36ae02fd0e2d9cfc528791875105b2572f94e971e0ea6b623929c7fe5431
d0d41d3131c331724d8cecd4f2533801200aba354bd7009e498a2fb1a79d
be1fb32884034209513c95c3da1b22fef6e9e8ca00f3128d6bc227a8f804
fc25aa2dda7b1adc82a822c4e9c0f091ad5218ab31a53c5bc9bebe5651e3
8a6e7ef66e74c17cbc619d2a70424b8a48fcef3517a2eb57c31ed59b51af
57756c9518a30561a915685c896d10b5be72e68e4189ce53b42a72415651
2e8781a97ceccf5ecf50786d1508f5d27dd9c6e33309978a58833446ace8
6f1964f61980b8dea3a18e017c22987f78567395513e6fda51125a0f0967
431b45968224c50a9d7b15d53dde98a8736d7815617ccc32de27625017c8
3e02e68c06e7fbc66af1a4c2df5898bd51dcc9b8a8bfc963bee5d60842d8
336812de5ec4e1a78fff1393f4375c35efb5f87f6143caf8358886a23728
32af32dc0918ff9ba1260b5099720597f360a335a67c5b6c420c29657b65
d87a45c166bfa0e1abf062bef02f88bb7cdb16786d8d90bdcdc3127f4635
c17b53e93462a74d9372e8cb898c13f4512ced5413c965c2111f24b2c17f
87c1b623fc235ce2d1dcfd93aa659930d9357797a6e801a4205e2b1291f6
b8af6d252614329db78276913090448cbdbe6007da2b6b328bb25c0d643f
11851800dca0dda6612d09a9ced44ba25dd90096acbf1e9cc7d580e1e9b1
5471b173592710a3676875fcaac9e8adacbb00d2ef4fc8d04b46a54056e3
0592cf28c4e819018355868d3c917c209dbdbb33b9975337e1a550976ec1
a80790823d6e989aa51a83fa4735b8ab74c1b9b1348c376ce8cb9ee1b6af
bd387f2113a0dede61252afe13c06f139b2aa476c89e0266572c9372deb7
7ce14ad77626a949d09b9f6f9782e2eb25f35a3a4ea7093a0b572fbaaad8
9cdfe68f9f623d230c94dad940e0a543a282a52760168990fff9cbaa4708
3d12a701e0a7e4a340a989b53632d30c8f52ec37fdb3974803398dd3bcc5
56eee2c78a474884b73cf317599cf6ff3cbe2244fe37fdfc012da4074fa7
40b657c521914ff1fe1c7cb6cfa0caf86f7782d60132a4b3fb79991e20f5
04b4439c5124582916d019a7ace5d275b29edd1f88b68c3219d83f440307
59c71c8f5d8b2cd3462c3c79849008706f61885921111f4ef448bb3cf7b4
7b43133629973e8a7c311a8f86db2d05311b50400549b68405a857c6c544
8964abad2c0f40e2a437ca1331274f9053f999264b3e35c5fd9449844f9e
0f0f92cb24f5423866fde16894c591963af66ef02c12c5306a21dbc3ee4b
bd98e912a72e5f9a3e8f2d6ffa69d542a8aad75d69bbd8fac2812c69484d
92cc63cd42660fec32ef6ae45c0e1eb1775fe2d94e6de5338cb775d980b9
8d88d49025581e6252ca41c1e27a97b03d14e71ed40407903916101d0624
700e796b1474981a0fd353d749b1268f2536415d738d4fc5fe7cfd58db8b
ddbf8dbe58d8b81093a979ec9cea2085b70338f183098abdbf48b517362e
3e030ab48581afb193e41dfe00d3ef12fa9178f93dd946c8e2298d752315
ba6a88dc73e397a6c3d02cc81b6bdadc554f812dd25de7d3b239e19655be
cdaa420d7d498712d87a05f56ccd3a77c328b88c8f620d9698a000611a22
a228f44c1b53a0f7838d9970cf307030ae38e8b96a1d19f1e62d588de38d
ba0008f59e662c0f546da97c05960000bbfb62fecd94c0a05e829079815b
47e8241a2519c8b4471035daad67b22ff9df9e4d7c7a0ee09ba090886c9e
9dec4dfb54ca14042bc1d832ed4d4ee1685fdfe51f50f9f8cb6ddc2418f2
2e2c7e8b73532644ae6dd2303baeb55c581e14c33c7ba9853f0be3a5adb7
f07dfeb95ae41abe56d672fa4a3dd936001416da2070285dce099baa503c
beb60c6b7ee2547a23d6bf4874fe0905ec7c891af11ca91031e679973cbb
5a8101c04097c43aa615487a67ef45482d5ebc58a7a652862154881da14d
482c6aaf81e9b73f19d96747bcc7e0b34c544e3610d1e52d32e4cbee04d6
2b253b978e021368a0047578db30d66d6ee4546202572270fbce0b464f38
5bcaa64817c5e0cc58d357cef26f7f2d42dc2eedf83612f59ee4449ce811
9cbdbb8cf117d2bf5115fcc276afeac110f2143ecaad476e6d806d422663
91c99f82a8d6308ba2a6309c3bdacc334e96b7634aa07904007f827ebcbf
fddd1bd59116747c1801891a9e7e50288bff6b3157a766a5b76aa72ec681
9b7976bfbe69209b7daae3e5cb745fe211f00b6e0a272e4955d59ccaf8cd
336f4d9fe273e85fd898b16089c6c2be2da9b422e538fb204573c24036ca
ccaf00c63aedb4c26075b84362733eb81a3e70735cd62a19319ba08fb0ec
603705ee5bb578e6e872acca53a1f83fae30c7e79a252feb01ca5f8f3dd8
5141c688d5f996ff3f405e36c22fa9644bae8a78c4bda267b4fe1dd8bb7a
6d4e291b5d9ded6db767d8d65df84b1977a8a20f15b52118cc2752c6cff0
26b4726cbb52ea3ec03bb4581dd3a46d7f669df252b8af2336cc609674e7
802273a9ca44a701ab83779c2a292a125417023ccece5cc305238a8fdfe9
bf2bc11aadfdb5e75a0359e9ac87aa85395c9736f308d7fbdce660904acb
fdf54de87c672713f02fa7c5a166ff24fc50f48d57926a49070baa8c761d
8f61617113c853dc341bbad5764fe75c1e49c88c6a795c30b1523c30a37c
18dd1d0d87b15b144e0a117da36b27ff6fb33291688420caa0492c7b8cc4
c199ad4b341bd48e203082997e70965591d7bf36e21c6c1406e820b79598
55af86063b8193ae3085359ad823d9f224972d9e90e1ab1c2ab299303975
c01b23654bd190e1906419f78087ddbaf0bad16893efc64bac9f1f47fe39
51cb1f72f2fc04ac3a2784f696d9e71304882e0762479203ed557ad36501
fe758d26efca1941474709af8589233fc4e47847049351bf8d1058bd65cc
fe8bf9a6346dc2dc4bae804ea076198ea03ce3c65e50870ae131cc6043fb
30460181cb7f5cc1f4132503cad7057d88240cee6cbbaf70e3d90b3f2ba0
4c8e10f94f1e3861922774635f1a43f373bc0f0bfd6f241f5be0fca1f319
c865df4503a448d08943d419039e1ac9eb0c6190bba7184bb2046374d3f8
2cc11528c4fe20dcbfb45777a3a16717a0fed40f0648f04b3a210eb49f14
ff849bb12176b8209002516a2ee07791d2d78bc089da2648980ff0bc7efd
3a28ae049dfc5c9ef918e0e6999bfec76c75c699660f9bf5dc7e8c1ab8e4
46bd7bf728ec34807d705af6bf84187229dda830c540ba8e8896b22b0441
8712fca17281084e6c4b3fa07ed9c0f5d8817eb739806024084b6001d9db
3aa6439fd1d4ce220af9c61aef2c5b5d1de625cc041eb683bb3aa6aa80f0
909f79990961711a65443df4eb969fd245b0b188418e5d9ac0f8ec0db2b6
d8f0847824344ee2c2030e0246cf855105c74b0b22eab557979fd43221de
48438fc1b1769a3ff033795efacb174dd22c51f0b113c320977ae24a7fe1
a10c9c65d39735448917bca3ef33d673be43d6328f7617ddce2ffabedfe8
295177835003b5577e7836a80bd0b7e025b5af3f677923ee9117fdcf20c1
79d33ba9c4396eb3b517ea6f767aa69cada08546a26a2ae436bd0c580c47
bb62a4ea7ecac2be7c71e0785a35b00cf6bdfa2bf74c55acc0dc5130d43b
54b95628dc1d879c3b1c04b14956c02453d4c288f9a0c20dab406d154674
25f30e0f3c2e7d33ce221976028eb687f94654f664562a3059046a87f009
9fb47f940595965ceccce5f2daa7cc38730094ead111c865f7584e1bfa6f
4bf1a54a14e723ad9f45cac0bb1450b7c57e448e306ba931cd3e0a139be4
2f43a36c351f1c8f46b168d01fe46cc90b880d47c4e27b8f5ee112195930
e33471264a52582f0a667414557736fd76de2fe4fa845c4cd7acc157bef5
ee07b20addf6b20c158c3800f92304ce1f8e9aebfa93a0f21d097daba380
a34b6a858e82c8d34b174d2bab89ef1fa1a1f06691061a00ee65a59d8b5f
c89a9b60903dbf78b9c3d668f1349947de69d4a572e51405b501d4c8d90e
769382ab16730cc7935de599d56bd40779e4ee2ac1e54e0c7166b93571de
93122ee99d827c30d8af3d93953597fcfc003db1045c17a003be0ad5a058
295377b7e888d713f384c153748b22299ee2e285cd4b967b566ebe4c2ed6
a8168390de8dbbba5058a213fbae208d32594b34e31db67102e6e1700ca3
07cc25c2dea9269718cc9c2bfb3b24e2fffea2c472aea9ea08f8940059f2
027f37af8224a1ffc7839e9946c715a3114ac304e1dab58dc171df81e1a6
6d4bddf5006a3c0dc340c2685741757028bf74323fb4959314622eeb65cc
95d974553dc8f21d888ebe8819f4e8c7e90ef26a1fbfff9075163594e374
30e0e11f3a66b9137734187e99ba720710d509bcb9d6658a3b58f3a01164
90c17e41114f62fccf4d580e052b3bce214e9dfa6c6f3bd3a041b1bbc5e7
757f1ec14b457836e721c1aee5487b8c2e33d8cb60273c04d2cd0504ee8f
64842ac2662d8516dc617843594508a63e7e629ef80cd3223feceb4f1fb2
94597b225bfc147b87308287a5a9f02fac5430cd5733615ce6c993b2d907
1b819bdde42088eb1a8d6909e90c6e15b654125ed93d7b30b091ab6c54d2
fa50b9d49f18f0b79883c2e6a7bec4d7a787ad8afbf77e29fa1006090e7d
f8caec57f11aa9993727c8f5984a0d0c8e9e2b9641a468975af0c34f6f64
172f59113f1fb0ec407839843644aa28bced1e8beffcaf8ed22fb553e6df
99a9689e48802f224b2cb79eb0a16c351ef1d90ce5fd60e63d3d583fe26c
371738634bdad6f5335ffc52e6596382f81bf6a00732c7552c2bb42430c2
29fbe5dd7d70c1c9aa835b46ea1497750c6c5f1554faa75dd0e33f54778d
b6b32d2a0c649deed02e49173afe836f6d169accafcdf09557babd61f128
ae401cd1e114e3e5744d58e6f7ca19444937536e0a061022ef26fdfb238f
136b26f57d57c09a1cbb09c1bc869d9b720c0eddcbd6a29c5047738fff94
cdbb3d929fd91364dfdbbc931a8737dc18e946c1ca8e5d3b72bc9441797a
3796c95190b0d4299745b8a68312d9dcd84878c93549a33782e7290fa901
8176fbf1fc3d9ad2650f1b679ca43b7423e80744b4277a886b31fd131b7b
5b1a135861cb0f147730f0fb03d02135612bd040957e6d5212c549a9b8dd
bbca91e741c0d231a4e9b20eb2324c2f9e8998c199e0e50dfc91b62f0cc0
09f40df555ea3f8edf6de3e753a7b3e39f8e8be1e06e5ab3b1654d63153e
5a1428a25359e8b0f460afbeab06d8d0b451450f7bbe432e91358626d1ec
92f85ec901da1445a595e402eeb7bb17831c01e2edc3ecb275b1d8be11a3
79ae77545a2ac071ea4c27e3d555600e128d20dcac21d84c3ce1151a94c7
ccb0f561f8a0f77e3d719aa417b9f4065ae3d66b64ccb208fc67e7fb0981
d904114670af6503a0efb62068601160ac4d4754fd06f12850628ffdfe31
d10d3fc983f14dba3dd5fb0dbdea9282a706f1f214389f4f31878429461f
b38717661674a11d007f6b9a92d92d2c6b03f06e563d78b38d1cbc0e1f19
2bbdc152b5a1dba44620968c44331ba37ac0f2bdb0e21c1d0d25f8181014
673ce415a2faf9ee288dd630c49d020b148e67e0b3d9605d224096b48007
2a99a2c01f6f05c2b70ab99e4fc9daeae7d26c8e29b31fce24368106f84e
083db4ab8ac8ff05afad002b57edfe41e058036bfeb47e03ac2a2ccff5da
1775cd8aaf44a07714039580bd440b3d29c6ba6568ba2b0cbc255e34cf3a
6b87674a4f2a9a9ee9b5d88ab12cca7bf4468d37d88efaf205f0052302b6
12b55483f801904a706cd5bf38a29bcf2a2e5a84cad64d58629f6ea5e3d2
1eaa4552abf845bec4481063baf1220d50fd7a1f15944e59790904b81d3a
2abb5364d08bddcf5bf47dabd7c24d74750f2713cbbdad09b5fa348019b2
50f990a0f38e63e184667704af4f21775a79f63de4beb7bdba40560fa47b
838844e1eb1f35e53e847520199c09f94d2747f10de0aaa077f9bed567a8
498df8484d26a6a7f13a053ff48c2d78d4a8c5215f64f772d3677e23082c
d9142367818c56df2f85157cafb5662f7eb751f705d22ba8e5ae1f93ce30
5a96d87ac5ecc60b2c4ce1707e15b6d5ada6be72d8cc5c49e8aa6f4c6254
a25e4efadfda3e028cb2f1817cd87ee00d7b02681dc888147ab8718d35a3
09ae587cb0db1f779daac19c268d346f5235b39a200b37a9a53aa61a8ae9
c0d8c2eb0730125654a3c872f3faccd4b4afa4d1da7dd56e4c825cea56d1
dfc956bcec36c5bdfd51cd804c3bf63e3bf9aa4ec96251bca811d95cc742
3dfa560abde2e6c6f08af1d6778bbecbeac68a0bca7679b62073affc62f1
64ccf5bf60638cf6ac63d5683ef7aa2d96da7a0bf91838d42c8f989aa2fa
dd8e62165873d86ec4a6a53baf5f136eaa1e384acba8691dfb29d0cb9986
c3511409ba67e9c7457376389227a9f5b985dd484bd96b4fe57638acf8cd
920b2ca70c2a2015c59e29ee4ba8f3d012b7055d744588bbf3d64dc82df4
744c77ebe492b633d90c07bb0c56175c6dfa1d894031902a4fdb802db1ba
cf67e33b353db8412b4eb3245e5ef595983fda8bab4c017dbfa9e6528db4
189f33abe0dc3c40e87d838ac72443b1804d2c85ef551eb9e1bc55e64e03
93f6f5051b32ff95d3af7793b3dea18c4b672cf2204b9da4bc674caf02a9
cb7f4957ba73574f0be4b8c781336820b0c1f3690262340e1db44c3dc3fa
a010e5dadeb0161477176612da9b129c16288739ab6e72f031c6d209d183
5a4c581ea7b74d5e270bedb10fb0890d4b1a22a03854e1b9fb28b1b90a80
386bf1015fdd0f24d935d360f31a1229de55a86d77d37fdecc664a0940e4
39b065820b883dc20eafd00ca0de7578eeb07d00dd5fb3cadd94d7626600
4571103efc7aaa45f2027b8ec2c45117a53602821346a06d3a6a832b0393
b08141a3f332640fd5c34585876742bb8096b32cac6406599bf3dc2168be
2d6f990cad1f74d5de9e7656b47ad36f2704621532783f40f0d0b6257844
8101c04097cb9a17001bab73f444896598af7a748e58edb210a0ec8cd515
d9363eb13b24844efb1571abb11e2f0a840d76ed7250311ae74b1f0af345
7442bb83a0e07d2391b7a75b6c2a0882340d3b735c0b31e09fe115ab476b
0f2445f6869efa1296a9566677e93a9260755e1ad333f282c7d5c12d927f
0037eaae61a71f620c1fda6bb9be95d0882a5ee9aa04b0735cf1867db0ac
0aa17d0571c7a48effe69b90242892ead9a7907f54830e413eb6fbe645b7
b4908e2eb0e819768048f1961a2a2c0ddeaed78d4aad7bb2a234c6e93d42
625f3d247bfb1e1a17c375535cd5f1ca3c2c359a379434b65d9a17dcc6d1
3baa52c1bd8d48cca6aa3c00c38541a45814af248de5b1a454ad0633e35f
302e1f5a0109a955f4751514a58c2156377a81a2ecb84d603db8566ae09a
1a261fa98ac87ea9d86415b3ff450efebe423c0e4bc2e27e66922297e6ae
0b16d15da83626bb93b5806bae451c4a56066c2b52877b62c4c728b6159c
6c3c5d62211a7ec072f6f87484fa8f8367eca29a491ba9444af4bbc06933
24fbf0b0f1ac7311fc82cb3fd7d64eae2ebe7372de75573db2e07623429c
b00aa34602edfea53f12422b5776fa66d76536deec7428da64b09dad2659
01ccd43440e56c3ee100af786e7bbeaed689cfb4a9cd349a805ce6da51b3
2dbc8ba197bb8c42aca0ab64cde4cb9ffb07f79d84837a1e8ab5179980d2
00e554c2a6fc5a622b0f21f2698accacd7a9ac829121e532c6954eb32ea9
f6e46d22da460adaffcfd4e427fd7abafe5a74b73c74d86efa1fb00d982e
0738aa755a97e404e7050159406094d4b56b91aff970d7402623b85d8d15
b325ebed86b1cffc04fe252dbec42944629c13ce965d1c9b09eb6443bc15
c035039aa324c585cdd5b83cfdacbeaa1bcfdfbbb10eba4857f3c2565ce5
aec7a27e9a2e234a24c7d655bb6c65423048ce27339afedd062f6d8a2637
db349aff9276b789a54629338c21d9cc32b2d502a44b8a828d265b6c22f9
f98a9aa8660cd78f2de5ccc0ec9adb9118860c344689429e55c64abdc1db
34d526893457fc608bfa12eb685d08ea76ea2ad38491408f751904bc4170
953826ef5cae11ca039600d090231849675abd75b53f27df6ebebd05a143
077da303c68f506b003321fb4e8934be09ee1eba13fa7d9c0260efc90a4d
19b8ba0e2621681c0a4026f9d192c58f2eb91633aa97dca45f2fb52419fb
689aff49ca03d1ac10e09b29bc55b3d52e6b9b095c8842f4dc1097d6c1b0
e48836db8519d33796483bcd05421bcfa70bfa2f060f7b4c40997b980b68
9da563cb315da77fa0f8b1b8da6ef1906126d90aa0f253a88fd9363630ed
03e6630294262a77f13f0c7721fcf5290702987cf787a3e63ded71f244fd
6d0c70842ae8d43d6feb63aec2b7a80327d5859ae67c73add31cfc2bf3d6
60a9f185105143281436f20b293a9d23269c43d0d90bd1b43e5664cfe3ab
2b42817806bae5df633808c255927483912409c346ce6f7a0d3bcf9bced3
b2d13ea51367714370d38130c43e6971c7c788309c6a9d1bd9b9fa9cfe9b
713e430b175a27e0235fc95101c7117bb24b402f4b3fc04d1b16613e66f0
c7037b91cbe70f800cfdfb81c742b71d7c2d935a1972bf68539ebc7fd50f
4a918ba3eec41639c8d6f7c82acd27c0df1559eb6c9c87cc8b7b2f0f290e
609a1fe802a81eb2ae8641aa24ec205945c8ca8c7aa089ca1a423c6768a8
116282d01fc7483bc0fa3cab863604e0d24afdf1374d788cccad0de22c7d
0170310724d07c06858929f60d1082cfa4a20b813d2be82cb9d8189595b5
31fc27bd72864e3c61c459f3eee687be9c1979638cf06375f33b439c21c5
8e95ec391b7080fa1f55d7bda7cb13dacefcb5ceff70c4fbf1e05c7ba847
1793c3a56bda490ce9c30a9958bd608a7921d4df8a78d976bdfdc2a77900
8e31d2d35fd16919e3ee2eb092b71f1f538d7bf1fb5e242407a5ef42c499
a9f1765b1a5fab20c940bb6a4a36e3e20f105e3de41f7e1431c878d6c0be
8a2e95f83fca4abb02f7d774357685c17686505e8ef489423a0bda4c563b
120d2a7da7d1ce28b9083f2bd2ab51edad018f6bff44608924cefe376df8
54d5c7d9d49b0b2fd2b3196ec38eac73bac035d4e0654d2ef6dcb965247f
be815d74b048b00bb3352dd73b089cc76d17b9cb1acad3024afed98077f4
eedb6481aad02093ea273889041b6862dd9cbeea25f07b9abbb4b6b274df
1509d90dae2c026c49636fc4da9b214acf169e7ff0d5cb8afa97379f1c5b
f41d4b0d50a6630d91560d0d599e0edd879e0f5c7e3b0c8d7892f445be05
09fde5737f2e43c1dbbc29b0afcb0dcf6dd06913f06b904aad82edafae64
23912ec92bc4ffa1c3360a54e2ed71045ce506ff8efa58e14b1e9edca39a
d277c246ae143a04cfc31d1f5df69e171471f14fef480421f15f086fb463
5a57e3f828c72409290417c47614b72b313b8c3196241bc64b963f9bb465
0c45c5ca6909f638f7b7ec45d9102220edbcd02b41997a58d46537882629
ea37d7fd3d9a6cdcfcf90cc083deefe4a0c44e15aab5b0ce563484028852
e00b5e4a057eec44bd96ec1ad34eed3264400db474387cfbbc3f077ab326
1f2dcf5cca83d724843c62f6593a7a7e5e7d339ec71175d67647b9234f5e
828eb5855ebbbe634cb73d6a4f90620746e0fbbd45e4e781213865249437
915bb51ccf67eb2796c09ef1ce42e9bc0673c8f9590320411fdbd31a4d08
0c3c7857d6c549eb074d959ef1f27fc65027e9998dcc8235f383c0b64942
cfc06e3e9b7ea952abfe5105373855f674af623eef962198b638fcf4c8a2
92d685c672c31140424573814f2486ce973a076ca24945f209e11faec4c7
210c00c2c2ea2bbb4a13d62c36f20ffe5f2a6de226b40d8a06a73deac1a3
b0374479f210dec58ecd4c51c16363e1cfd9b566313570c3f68c2bb9a9af
753a89aae6ba8bf96fca73c8a1e83ba9f3ca4805044af9a6c1a282327344
35c1b60b47b1d1827c43e6a8fb30dd0b897618b02767ce9fc2c68bb8f4bb
13402d3a339ea40dc4998ca41acdd498a0160e0551dbf1a716dc598a295d
7db1691bcae67ca7faa1236bd26538546072f4ebed86ffff64e911e6597d
08aa059185fd29d80d59912499465e54c44277fb8903d4add7d77438d7ad
a29c3605fd3a73214b3a6e7e0e1eaf8f2676639c80a4a1e4bf69951f3954
f9a310b8eb46f2bbe7ccc7f6487d88f1ee295e2abc807e75b7bd69d7e92e
79e2d66015c10ceff4ea620e9103620517064e87704f4070e0f6f95322be
dbd3484b2fcf29fdab45158cec6f42b8759abe5a238e4b289865879ecda6
290fc6f81aeb10fc2f2cef684670de12ad98f5da4f396db52bded7f4e8b5
bc651dfcc70ade4b7531720ae1aaabadcce8dc70aba2eec9f0ab1e4bf850
59863cc0c5eb45cd54abed1e3cfb69f7059bb7e8a100952ca93facb6595c
90d73fc98ba8d0349d3984d7997ad2412f88ce633397c9ec76ad8159a609
da949d5d9a8bf1d2b2c6762aa1717a92222381a100c0a4bcb837b7ab46ab
beff0b78a4bad28fef17033f6989f459f88871567fdf89e5d9d7810efb3b
7e1ce8912fe751ed333107c8da919210c573138aa57c324fc2940f447e81
df7c7315c29e44ba50b3f09a01b78233aaaa6c98ed1b3248f5b4320b5302
d4f24b1253357744c49dd3acc9c8e52c37bce9d6ecb815000aac900611ac
e2fd81e4f9c6fd2acd1e991f4cf0713376c7930c9e1adb373980a0ba01ba
3ca3a17c51b9fc06dd4d8e993f39927bcbd68cb74295be20fcf2d175cbb5
0e7b94562daab36a6ef54eedd0b0136f2b7ac0c5a170801421301a1fddf7
b12d1afc874a454e0276395f3c1e32ba8c87e7f32b450f02b62b122df272
6d97753beb5baa175e7405e40fb096e6f3fc9876930d694eb4db0dde8d79
6d3beecb34ae33a6164df1ca025069969bf743cc09734a578d48aa99bc0e
fc2ce58894e8c7b1e4be2c658068bc5423e36644119fd61c4475df26c9d2
0bf38b7fdcd5cf836b7ae991f2105ce5435b5ba61992a442e422868db7ac
b601093dce96a70cc7f6c8bb34d5fecd7aea3a0e16c62eecd126f9490c3c
f388a94b9429f84dfebd416209939c7fb1bdbb4313062ea86a564f6a22a8
171cb2b25837cf7bd4042ff741d181056cb29ad8a595faa2ec3f08cd0981
ea154b225cb3d9bea649ac3b6aea264aaedeb406714fa27c0c4cb563096e
83c0446b0699f6ba0f0f8f0c1ecf009236c93ebd8e33a3871632ee9a9c05
ee386138728c8570b4b966d39c5212e1ad0bcab64305faa1a4163dd2e076
8a1fa40a0b7dc67dcc124d5c41c6cffd717417745cc8046efce316d4df48
35c78cba79dc5a5b1a3b09a79dd4d6ca9388deddf5567e249d43412abe4c
7b88c9ae1d3eb72e22b91d6fde69bbfb8851ddba530aac9aa2e753416a28
1a58e70321948faf5df87c1800cdd723f2173f6bcc29c54bd76ff69b1cd4
0c7d58ac7218760e3aae89d14865dc0766a1ecb15b048dd56cc5af248267
f17cb9c21e7751108719ac22c48975feb934611d239f089981158da7243f
0408ad984d24bfaa2cb8557e27a92ce29d96c78378c27dec00fdbde8a05e
9dbcd224d53a4ed80c62be70b7d89b3fc0f178eb7afcd9c4473d8ae43c28
721987a7b51a4461424ccc17e8e25122d4e49f7f11466cee3a763cc11a56
57740695cc317d6144f0612043e42d50485418432309b08df88075d7c47d
ffd1361f3cfe5af4abf525ebfc5163c605991b5fbc00197972a64df4569b
7a8db1b3b32309aafe72089ed7a68bc2abb7524e9bdcef36f6a57ab75067
2b9bd1dc7120b62aff4a0e4af28da943fb65b88a607358b03983bfe3770b
da87e092b41b8d5991c6e3f6fd95bebc9a93decc07765f5a17130ad6dbbe
7c581ea9c1acac4ed8cc36b7e2847f4f90ea226c3b19e377932b69f6eaa1
3a599bd4e1c7b02102b7594cf35d02c98f3aa98f5ada9a7e4052101f9e3d
2252ed80e64f03468afbb3754c4eec4c81768912a1aa6a2efa4ecab8939b
9f4806341950125f5be485b397f2e3070e1b8a7dce13fa56b73248af9060
ca93fe52c81e7864cb15621d838aa71fabdcc1a5aecc03cd87d1ec9b8110
a284a75de49422b14fc77486e8f410a0193411941985aa7d313b1da6dec8
ef5d1266fd160b85b5c85165a16add72119db1fda76032cb581154a8eb15
6a70e491d8c711d1c8ea3006fddd46fc40c918e604c25f47fab15b51e7a7
47e3a425825586771ebe276732bdc25aee496d191377c7f6f88b71baa1d4
34bd445a40213a22afcd5c2cef3d60543a068da4cda16f3943ac4ff448b9
f62a4111d0e0a5e73a0f556ecf65bfb886fa060b2b1d9bb501dccc03eb59
59b00c0943f69fea82950f2e1c01c5460e75a96cbb59080eff4e319b3302
d8037e73ea44a29f3b2c5c6e0208b688b3cc0b535ef7912ae52735c3c3ef
8510151ace5bfc06f81197beb7e7c40fcb6550d76a6745a08bc704c37ef4
adb82e7c1bc46d451e7148ff0f60a1d195c91596c22a9b26a823e83f200e
b1a8ad7bceb963d982459ccba3e1923d31e72c206ddf7da6c5b2e52b8d5e
d990ab3c990906e79a8b0af90aeb8c33351f9e63a1df609847072cfd584a
242b8cedaf384f7ac56503edaaac9b284459e127deca1bda8bf044278da8
23b58ad174929bb7cafe18d3615c72af1ed348f92f5235481342fa22e8a7
567a1c61de9005c554d7412f6b26460cafbe4b7cfdbd1d623fe3572a5fd0
16d6fb446ac2a9199778298b0f44a62f4c9d33a8971c3e8dcbeca68a082c
30c164441e97e23fdb76f1a273cef6eff12f752a1ac8b095638c7cc20386
693efa5738fad63172d954aa2a620bddd9ce1c3e50b0c7d88fc688b98527
e8b63f0703b01a8ed7f6c0a248482d5f6b192a8262ce9938f703f23cdc3b
668326446b332977abe272d2b31be71613fe0da06fabde851fb627b1f32b
8ed39e6a464e861bc571fab14dfd0c031b7f17a28b5d8bef5184086e3113
2c59c205a5b1fcd28efbc2c5ccc3487455b5b683ec00c771cb79a2ee8334
ab6a7403fe59a7a26837605d7be7c39b82cc0edd81aeb03189f0ded1ffd9
0e0a3fa187bf5264dd609544684086e34eddc6b0aad38efb30d0e0b2d4da
a46ea087e188003bba50c4a29be0e6506f7cd7aa9e96606a4e2a7435f0eb
20e27b14c53d794964c6c4bd3d9e584f37b77492faafce6cda9f779a79f5
f79a37e831df272b450e909459db7e1ca28036a4581ab351dc7480c00344
933e88e8cb9f231be8562f48cebdb3355159df4cb69dd0cea341c2410a18
f19ea87678fce985d2d7a05c08c3a2791f0c1a007664881eb0d744693a73
efe289b95762b1ab4ff4c6d7db82d0835bffcee0d7215c914f76fa3ec0d6
953e2d2fd7e263aa43f78ebae7132db3827fd9465ceda9c1175892b4f767
d92572d4fd237373e01f21528bfa7553f40a455c64caa904caaff26562d0
a8ead8683d9be5fcf2d7c9a0ceb86cfe60b394bb6c5a657ac0304f17fef5
594e4e35dc2fa0c656ab45cc79196446b8522cd3b4245944e85c29d7b19f
10521a3b6d565ebf83245719ede8712d80e589fe54beb4be7ee232291da8
4fc42de0060bec36ccc252a9839bd8fdc2103077d7a57bc0a54b53ec2f72
b942d635a073ce5feb2579b881f3dd000e417f24cfd56099020c3b0c3c5c
c0c5ad0d916ae91e1306b9b436d10a3953da2dc2598459b1d964489acb9a
2ba483f475f19c401a81fc2f38c79632cc35ed467e7a0fa32ab171bf6811
967815876aa36682a70d3150e501dea1203e8a26d460aa036c7f6a8837df
79ed0c8a7cc5f42a113828977b33bd2ae94d3db8836a53361c9acf3d7ff7
cf69ea03f7c34afc5579ca800551fae05cc88dba924d1ea020d060a43db3
aff1f8a76a1b7e581c609b6e69e5d54abe8d7e1cbaae73de57dab717e6e2
1ad1efe273f751e7ddef6dbd80c3dcdd59e7073881ac5b0f880f1f8ebe3f
eb2309e62b4351d86fe97320d2eee2eeb4b51e217cd6b3d8d2ad44aea636
3d104ccf7b81a32d51011dabf4d7043109d00b870a8541b04f0e9c27eafd
7afb0b085b777c63fc4e4672c8753ec46c30f967a5904302c9696c42dddb
0460dbc570cf35006d2306bd9dc8167850abb66c940f7d5c548c3c7f388a
1932b6fcf5e92938b93204578c5e0a69664e7934fb231f308217c0333c3a
3f00100fd6eaa3a266abd7d773973661453622307c7b60fc20fcd602817e
40897381f5ead574ba76b85dc64eb17019969f10dce3c75af8e29759f5aa
3bf49596255e2d8f3cd66b2c7143fe7052cfd72962f54fd521de02f1d2d9
e2a6c49129228aa5090f245fc81213a1ce9f3e4f139ce7e1d37e59c4f07f
2b3f5d92346f67ff09d000e7367db2c50d72238385008b7004fb6233c1cc
8cc2a4cba76f520390390854b6e19032f833d0cc933b48ee56de4fcc13a6
1bff6fa8ce4e4c113dab5781a18d8298be0f46e85478a802fab0791705d1
a45407a50335b9d0765f7e86255f42bf0dcafefedde9232c761108342bb2
490e1adfd22902ac64393b43f1a448c1142ebfc45cd0cce5700d319bc68d
36b86605f8d8a9def5f9810485a934cdfbbbb630d352fbbe82b5058069bc
10250f6e071d674436188a84d03bb95ebf0c9d61dd75a2cbe0faf597e362
bf9462bad039749d77b0b3812526b472d73ebef62c312caefa8ca48a9519
4de1fa9e219afb1844ed989cce97b68fd2b1bb01653972814078ea3d0050
9b08cf972fcd99b93710acbaa7f071da85e6c6d61a58c610cc88a6e9c5a5
900048c45ee882ea5f6db3a703427ef8e0ce26503e9edc03a4d28db45f55
e18619da16414c968ec7bc6de859f3532ae099af3466002f8fae4d5f38b4
a7eac90b64cc2c2c6c27287b7c8bc75a5a93930060c1f15967f7c05441e8
9d2b427b023a59be074c1299c208e3a346e5f61d4e8aa3af471faaea8cdc
79da91bac54c3dcadb22dc7a093b9117294cbb83194a4720d5b14733d0c9
e44dcfdb7858ddd8b7f54bc8ad4394f38cbd1ab64ea8ac9959111cae22e6
0efe355e18951a4a755ff44f4c95d70804195eb5d72c122d30208e0f0cb6
79cc997e15b1d0ac4c349427288711cde97bb8d4a4603a83cdab11967a0b
5747784c1d81288c745eb4a2b2acde0317bc4a5815afdc20411a5dccbff6
f3acfae837e41f63d36156003653b46ac22d460df4087f91543e82ad3fc9
b42b70ef9bd74389a80a9015e6fdf7b05856e1d0e1c8a742355e9e94ba5e
1b622ff980f31a22ae223c1ce074d2314cf7bdd23419daf1913fb0d5a189
312f1bc10f8360c3e80a1fb8c70b79e28eda2974eca7775d575741bdf586
1f2920412dfdcfe8a210047ef2f52b49f17692b170de81b090895bad5cb9
088983daae98eaf08825af11d5db0e2b34922b77f2921fe0b6f9ec85bf08
977146ab91eb69715236123bf06c3fa7cefb596e9d85091434b1dadb54bf
a5708cf3e5d35f77e7c0a70b6298e1e1d12fb5773bf726f5d72bafad7c3c
9cf52047add572702f7bad1872b226bb7c81c3cc3bc0c86f837124e37710
bbfd8ccd0cb08458e0aeeb83abce0f691ae3fb030c2e900b4123fc796aa0
8a57e4734fa4073988ab7875d63ca0c37e8b21157e77f17eee33976d7aa6
59c068e7740a8060df0fda02a33e7b6f0b2eb15535e4313e4a8f7c07dd03
a1b151b7fdf09209228214582b33201ade9078e125e6d12d1ec88e33779e
461c7b3009169ddad79c8915ec9bf7e5f909ee57227b8112effa387474e6
bb75f76928be569496019aa42508bda024f8c8cfb24a96a2c33ab2012f45
d82a4131cff5a7982afd89a8ae8c4992d4743af25021e8f3a0303a0ab4f2
48998329002151797aeff1e0ab7886a64478bef6ce54c2c7f14cf7b655ed
f1d22de43d9339653184896ce5d95cebbec8f077c72bbdcea50c8f078469
4424ae2aa1272b2b18bfcac8a2b1589096df01f06e3d134025b7f171d09e
b6ecc3b06f11c426f757043de69315fa9166d6c6feeef2d5e1a6a0261d41
b3004a8b324abe5caf4a4482812b0297a81cc4366f520419fcdc5c52a5c4
f67f71523579e12ccd6228858518443c60c7325c468c01ef11c98050622a
912c66d628056d091d2a23d933cd19437f58cb88d0f52bd721b53c79d1fe
c949ef1b88fbb25c408a990316f62e83e5ee50524e1a1259c89f99dba85f
464c708b42da8c682e70e2605dad1bcd41c8f30dfecff3450c1b3218c039
488c9f742f7da6f327113c3bed0a45fc2a47a6fa9f3e6b3169cba81dd9c3
524c6b6c2670f1f2e523d16c4d7e19eea9d6e1fb632e7d60dfd96c97048d
95e064a9d55258f831d4ab315ee05caf375f4f1856b9fb8b998d48b99f94
26d50f8333297cb4f64c65dcbfdbac7a72b45d27d7663cd89b7bc9e3bb03
23c7b3ff74381f72ee01a715e0194527216351a8794e39670cb341fca44c
ffe0fae8d638eab6dc9dd6a3eaa49b7ab6e8b2b4f065d3b6b775ac00428c
9350362da2392878f6764119516b9175b5197061bc9b97dc7324bf86ba02
2a3b5484bccd5846f34bf9c453b5d698359eef0461da819e9fc6ba0447bb
3bf91cd67396bc78eeef68210b6ec0a6b0f2a746d634944cd18eabf49d62
9f2bf49a81c00a588bed44b4cdc6835c7a265501ff08daf764b2645569ae
94b764d38e0cf3245647f58507991fe20d2f0ad0acf136947e0524b73cd9
b122c34f9e768717f0fef8041c3f985813325b3d9f422681b9e21bdac530
220b032233bc0a35c41b7a54ac62fb73226f56e9cee24d5e30f8ac653d50
7de909e5abc1daff7fb6c27aca3bd1332bf8c658c2dbf1ec64889edf6f98
200310b599bf8553f6475a5281e853e6942f9958a44a2db99618aca5ee8a
f080f54f84bbfeea04637e184a3758641b3d29a2654743ae52ac696846e9
7512112b823e34d4d2ae4209654047d9caf1fa81be3556b31d4ea2951284
5adb69f13986add1390fd833ce3fd2d7436f20c7227db797212cab335387
5dd777c50e3e3bccedf539876cfd84db8ff620513ffc870978a676178212
b1eecfd7f1a65d2472b2ac593225644408dbd287129b5ef62dbd17c8524f
e3dc9134aa1e09f62a2ff46539cb7af46ff8a56bd4373826deb37410a176
59d0eac9999171e999154b1991b2b20081a3558133805c2f34a447da369d
b1a10048e9c92564bd3d87644a76e952cbea341ad8f7b1da62b0edd79e74
a750e4db6a83f856bc633a38d1e41e118e28c78f62cd28ea2757f39cbc12
7a24233e89e2d60e9431a5ff93dc49b01bf753fd7d723f9157de0a0801c0
6bc9825d69b8b65e37879b0f0f21714feece5b8e0822b37724ac7efb7e23
177fcc9e34d281ee2f898d6bb5c35cbcddde1cd4ccc06c4878e6e12f362a
dcf5ecebf1277468b21b5b4bac77d46871f033024d75eb7d589d59d741c2
e08cd110f2ba8c2646ebea814e2bd8f0e9f4d5a7f818e1f51ffa84d12b74
99587f202f979c77e8185d7a856abf9e1f2641434a666e5768679f756649
6d33d83a4c696aa71f5aefd936cbea7ccd75e62bc3e4ad72a7a2b46dd486
57e6db92c5e77564b06f6edbe1fff4ffd39a858960950578f8be2cf61b96
a3721982d0e8bd974831d4617942b7eef1dc27919bfc1463532f60377f49
567e92e0fbfc727a4eace02d7925427756d3d675e50e74a0f7dd5a3a833d
ea19a34ff63355469fc6bc83572a5e478e575651f734a74c757b2dfa46d2
2c1b2df1588d432c4143f01e11bfa201cb8a36ea422c15f59ac9335561ed
cbb325746d55650d1602f427866dacb18c09965f62582eb66995a3053cc6
46316615177e09a8bc6dc856ac56db57e5551e51146582911749a0b985bc
501a2056e122b0ec1aa16795cde99baed4634423a18445e1cc89c70b233e
da2a6284f9f4515bff761b606dec07387c3ae09e25b66af3f91693ecd629
92fe1c7dea5353eb6a1248f9fe366dd423c50654517fd5fbbe45d7425437
4dd9b3dcbf74a0da5c2286f999e1c56ac73f14487423fc0cb5c8226998f2
c449c98e61c9a416632b7b0dafa9a8287017695c5721e9b4a6fbd9370c80
c38450debb7527ff33d02a7328ac41eaaacf7d488d6c3dd015dbbb1bacc6
35a5b783e619c2c9d85da37e55a03548faa42b203b093c77860b013d734a
ffd3421988e99cb2fd8b216103b6

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndDocument
%%BeginDocument: mwb_cmr10
%!PS-AdobeFont-1.0: mwb_cmr10 1.00B
%%Title: mwb_cmr10
%Version: 1.00B
%%CreationDate: Thu Jan 27 10:30:22 2011
%%Creator: Ben Hinkle
%Copyright: Copyright (C) 2011 MathWorks, Inc
% Generated by FontForge 20100429 (http://fontforge.sf.net/)
%%EndComments

10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /mwb_cmr10 def
/FontBBox {-40 -205 985 739 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
 /version (1.00B) readonly def
 /Notice (Copyright \050C\051 2011 MathWorks, Inc) readonly def
 /FullName (mwb_cmr10) readonly def
 /FamilyName (mwb_cmr10) readonly def
 /Weight (Medium) readonly def
 /ItalicAngle 0 def
 /isFixedPitch false def
end readonly def
/Encoding 256 array
 0 1 255 { 1 index exch /.notdef put} for
dup 0/.notdef               put
dup 2/Theta put
dup 3/Lambda put
dup 4/Xi put
dup 5/Pi put
dup 6/Sigma put
dup 7/Upsilon put
dup 8/Phi put
dup 9/Psi put
dup 10/Omega put
dup 11/ff put
dup 12/fi put
dup 13/fl put
dup 14/ffi put
dup 15/ffl put
dup 16/dotlessi put
dup 17/dotlessj put
dup 18/grave put
dup 19/acute put
dup 20/caron put
dup 21/breve put
dup 22/macron put
dup 23/ring put
dup 24/cedilla put
dup 25/germandbls put
dup 26/ae put
dup 27/oe put
dup 28/oslash put
dup 29/AE put
dup 30/OE put
dup 31/Oslash put
dup 32/suppress put
dup 127/dieresis put
dup 128/suppress put
dup 160/space put
dup  33/Gamma put
dup  34/Delta put
dup  35/Theta put
dup  36/Lambda put
dup  37/Xi put
dup  38/Pi put
dup  39/Sigma put
dup  40/Upsilon put
dup  41/Phi put
dup  42/Psi put
dup  43/Omega put
dup  44/ff put
dup  45/fi put
dup  46/fl put
dup  47/ffi put
dup  48/ffl put
dup  49/dotlessi put
dup  50/dotlessj put
dup  51/grave put
dup  52/acute put
dup  53/caron put
dup  54/breve put
dup  55/macron put
dup  56/ring put
dup  57/cedilla put
dup  58/germandbls put
dup  59/ae put
dup  60/oe put
dup  61/oslash put
dup  62/AE put
dup  63/OE put
dup  64/Oslash put
dup  65/suppress put
dup  66/dieresis put
readonly def
currentdict end
currentfile eexec
69d900414434c93d12731064fd536c430f0d17df4ab9d6c6af3f7f1ea8f4
63720ef8808f60dbc345c5e854126dcd9e6cc0abf6ecc78fd00afe5e3bd3
bd50af43f1eb8cedfc10452155d9e5729d28e3fe39b0ce2d65b5d4fdf106
afbeeedeae9af59b792e5460fc248bcd050bb2805d9fbb15a6e3780814d7
529a214044ea8c313a8e3eb169335b89310f859d558716f8e0a77006fd07
96fe7b163c4f06a2fcbcd532cbbeaa0926d77e2631375d13d3c6db93ce18
82ca184e54fa91633418fbda39ef5ffa1868aa6f373b13bf52d01d239102
a41c2e1b2e6870a3e16d093d8243c64c5f274e950dd40237e8d636fed58a
b16473858560eabba5792653ad66ae7fe9138d08499de20111e39bde12c6
c93bafbeeb054241b532d9fffcaacc6e55ccddb5838ca54fc4bd55fca233
d783acdcc05e4cd308e03425e3b749e2f1bd920fa5fdb1762e46a1f678ac
a3a3f63b409810b960a58bb32e122f13146839726fce0ef0848404a4ea31
2d4173851fd732bf14fcf882e1d33f9e58951c94a7711840788589a2ae57
a601a176cdaa6407556052475e4448b5211d3efc62033b1dcf5db0d9d7c0
1b8212643ad268c4b52505a7ce7fc242a2d462b23dbf5ca610d9c0b259a8
3c93602ed280a6f21c60763a6a6c25b7e5a7f283572027b1ac56e4d1ae56
de412bf8845c372b84a6ca35004ec49ef8a87a297e0017e6075e9c85a3d7
48ad20b4de698dc25895989c731b02def35a798c00313aaf6d2742fa2a26
bb80ff6fcbfdbb60e7aa54da8f6806e64bbc0ac1acbd3483f9cb2a3c8189
d4736864763a24f8efbea7d142ec42d353cb8a06d70e5bf52245b2d24be7
59b875463f126dcab15edd72ab7effbbb68cb88ae6fc8bcad4e3e7c57221
6f5f895ef6b92b35c90d79bc95a94fbb9cbcc3d6046d6fb7d5e1c842c64f
597e99eb77292c3708d7fadb9aec4fbff549521452995476d4d96a13bcab
b0efbefaad08a2aa98017324ec11f9304f5a562ad76de01b75994d47f2a1
f9410192c9a9db9390fafebbef71cb5562fbe0422fca462ee11ac0b85b0c
75067243104c916b25c76a0f8ac2e1293d4187363c4ad677ab966a2ac2e5
a3cde1da238bf76e04d533a4edc0d8e4db65719a45ed737039614e07468d
90d205438f14e543f00f6664f533b4d9a0085a9f3d2ae4734ecbef945bc1
bc3bd6b0a8e51f27059490f2e3451bcf9b16a568412fb10a8f2775eff870
d6e6b78276e4a5a52240ec46444c1e71ae37bc7800ef4ec9b7d1eddbde80
870f777bc5f2142a9854b430a0baed2e75681de4717097f133f659700b28
ee518f1904c4941b841021f4bffd592c5eea2525d45bb0f2f7bd605023c5
40750977bd4d207c1137eef60bbee7c4c3760ef22ed2fad6a2334e396f4d
9fe4dbac645c8821790b4332540cf3da0e90dcb1df349c6a11a6acbf0089
be45339d30d14e59a7e4477844a5571fd4a2b67dda7da44b4c63e7ea8895
b5a1c36fce4ad8be117570a84abf410b67e9366b732c27b5a4e5d7e0eab2
dccb0da922ac4a41271a433ce54bb27cf3cba45e769c0e4af854b5386c4b
ca6dddab48b49734180f748f06d515de16c234b17e8b03b624dffe1cfbe3
74d0a2170cf85fc1d1af9f7f0a6a65fb14f1d6142df1259fc16c97d0c868
30a441f5a139e860d136f0ece2ac54af2af26df2f4e8cbf745d53df4ba7a
2ebbcb00450cb728b53da26a1107a8bf19af8499d47f92e59811709d2cdf
eddd9eef8dc334cdb7a5119934c761725e6b8d71009cb7dd178a8f2e3a95
a9e2b5904f15242358864b86f6f80a8e5368795b0aefd096a8d61569961b
336407d0bd05fb8de0209794ae56bc0afbc677fc8f7112430bee2f0bb5e1
390ae998a809845cf394a39a5edcfc78ed0a5010fbf03e371175fc88d9ec
cc24e2a81202d2280b3a31838c15c755fb41d81625a9b07f595b58c9e1b1
7889c13ceb89d8c571d4ade60ab8ae0c0ce51aa704472a026fd2c363d237
d1caa2939d8d04dfe18ff8e1c782ab0ed049f4bf2d5d8365247a3e5749c0
6e085702f8b2a9496847899f3f4383b91aab70f98b2ade3f24a890b945de
efdb883f541451bd21a912d59d7d3a6179e90195a54c82c7d73b7f690f8b
59fb823c5706e1d19e8b52075dbd172829f1f2ece2fc7fb9a23c871c888d
96ae243d5dceae9b92801cc94469e19d8353846255ffb013fc9ed2a47b6b
9a990d7c4d0bcdc8cb673bace110a62c3a97d0f078075ff3097f1a316f39
66b792979d9e819aa9bc11aae47c5a9f885779aae8fbf57619346b9bc7fc
45ef7a28dc9abe11c48e2cefc0b046f40223815739634201e40e7d0a19c9
51bd245d3bbd5f0fdc1f2f00d068d2f0dd980582581b248af95d6f141c36
be1225965c844da01716aed11b60917932e98c66f19f878fa8ce40824939
b442a4d7ce03d84914f60d5ad5aab166ee5fe2759d974c9589e593876394
1daa26e75dfec95856542cdf154795ba5d6ddab2fd90f4896d704a38e895
e9da72ba39ec21103fa22338a03fc2f1925967391ef37812bd773a687446
38c474f692bb385c9cde7edab3b01a62e0ded54e3d71895a7f11423a174c
62d90e760888595bc1a1c2a3176b3368bcce3e7832d8554ad9c9d14d354c
326c2b09149ec4984a174ca404dde68dad735141b4a124388eee02cb6715
c8acdef173d212108dcdfb2b6b86541a03f90b7541fca4ef206e49c05468
0a2e291582981158caf826e2c72248f55e134f0319db9ca1e1b728076158
9eebec8e18d17776c046696de1b6d4573b4d35612a5301e66c61ec3ef5ee
0814680d96526d4b74c3dcb2cd998719d6157786933292bb8b5281c950a3
220bb6b6b131241f26e12f5ee07a37c4fc55cc9fb26fb93adcc012e38611
183bbe0cc3ab279e16246f1075fb3294ca5e60507e5fd357664ff1901fe8
5698bb1c4b1a34e801b03f193b38e1ebbaa1d97e323c852e0647bfb78b99
92f20ae2d797f3c67bab419eb5f342ea35698a7bf16843d375d1f5df3016
8530884339675ccc8b5cee11e77a0ef91aaa719f70582f4b27886532ef47
28c4c20470b71244c7f7b62a19d7d48f4cc6f86a93f4f3ea9a6b1ce61762
1d0ce18cd1d1798f458e2c4decdd425ca28793682c62f3906bca6a4f360c
75476babb27b4e17a4c16db79799c65204f8905dbd42b795b0213b2bd25c
e588e1bf99eef36e4a2904c45deb5510763b05726ce7690c2535f356b707
7d38b22bd62c42bb7238fea2132582efc3f26c8b1e82fcac333e0826e48b
fa9e2a8093627b7a8a211282f64f21d8daf172f6c830aa73cff8d3161517
9c4033b9b1f6f650bd4a21814d339751179e1fd54beee681100026a7067d
0766fd887e0b2df5fdc41b49ae6b905472a673f6dcf20ee8a38ed00e2517
97535d8e3f3a6d5413cef47ebf2c5aec8ad4b2e6803bc9a4ad5ca824666f
3c8cc5edba76b8c683f754ca1a1bf2e3836273d7ace7d538bc057ca143a8
7e1e5796ee5d0e6900a75fd86fa543dde3f92e9b72d5e2b61b144227b7ee
14065e33a429aedb402d77f360c30ade9bad694e4ce66e6e0c746568c2ab
24e88da8ec1ac0f13a86fcca73c8de8fdc775f99e5ed4e658f27c9b4a10e
8cc9f23081afe561a86fdf791d9681dad4988ca106455eb6287a83bc3a2a
bd14876415f514c7bac21718f6e50b7bfa2ef8b5a608885d8d6e8c3bc147
702c836b90f7f1da5424da0a0f02e59158e3de81fd83f6ac8492822ed536
659319768499fa24ce2713d8846fb7a213195d281fbe78bbd444ac9fbad5
db8d46d84764ee80d1ca4b169d86a281e1f8a3d595cbce6cbdf10f9a03e7
94afc6ed2b28cf00def28fc17526dd8c9d189c197e8ab0efa1262a1186b3
790187b4cfa1d917d1ac36a90b0b644094faf75a6b710d7347dd2b8cc354
4a3788577ecde92f08d3142209fbce51ba83318cac0e2e2628879f965538
2e5c5ef208388407e5284ddb00e8255047b017cce202c16b7777926cd0d2
3fd9e3fe07d4a6f4f81597232fc4770149f8ca1cdf77427110549c7ce83d
e11419707350c64182f53c0d5748a033218dca5e1de608a801e396c8d352
1cdbaa7a0b6d752561f12285a1c3f128c24ef2a23a1456cf8eef8bd327c8
ee3b8e561309c29e9fcd1b2010d2a626338a24d4ab8e683d409803e205cc
698f6068184742d2235931247130767de4f5673f65709949fc8f40a747c8
65fcfee05d113518a8ecfe2da7c28383539c301e74989988ca60f6d1d296
7adfab94bc26453678d943e3a9a11a0f14e2456efa885d5e59e3fe9047f0
321ffbe871957213f86709f73759a0b18673a58ace98967f537b9e89e410
b709fafa0a4383cf4d48fd192231c67893ffa86564891a84c08c340be051
c5c3c202a3882feac6fd212019d991e0e1d99380f2284545a011efcddb7c
64959dc12aad64ad89615966237d169d851fb75502cd3dfddb77132f86cb
da3de136e223fedf6791081f9868a221e44b42657c40d125642f3f17624d
994ca582c50ca671da9ebd2fa8009c43d329ca9e4d458e5fb2cb1e84bc0f
77063145b16b24578c6dc38a416bfb24552eb861be72605c8b3236fae57c
4642aa9b703f0280d36eb908a3cf13e5a4ec3ba6cdd3b47a8e3053adf33a
d483f9896bf11841dd68ee98376c494154faa96c67e2e873387655ebf1db
891a8dfc1f3a6aeee64c8d921fbd500f15be0513cd42e1b93157533b22d7
63034bbcaca027d743cae49c70b46083d6e60e3eda887b90e4813a8191c3
062ba06995d34dd17ad0f67711921de12af01e82982cc3ab603bb76d31ef
d3596099ee3bb0d271a74c82c930cb0bb273760c059e6e0b32824abab840
fdcf8d4c9fcf80c50d77dea17defda3afd1afb889c64497cf3192c16cf43
6797306a2623d3053c00b9fc05d9fcdab5d5b09f8677a67c53da1c12ac93
42c08f237e9579d17cc4e241e353e055d61edc7e52c2df3fd9331b57bdc4
e6c74fe62c681a79b971143a08d01d81c7c1f2b22600f03fde1e76170d31
966586ef95c63e64e3a61abd14f0d76dcad524eaa3089f865a40fd3673d7
f2326530ac39cc236a6e5ae27457448fe7d8f87f0c0e37b7294e7dfac743
fe96b51c44d1e4b4eb1cca6231447f34a4757cae7cdd1571bad492bd62d5
b6f93a80de99b9e5410116cf8bba116fda21a76d072d7bf6ece259ce0681
cdaa4450fdfdb77ba7afe0772ab4054b75923332f3e89b0c12c8c17ab72e
c8e929525afad67b47fa68bd266c15170d3138c1eb23ecfe546258c9b8fe
3cdedab27fdac1bd9f472bb674059a9b5ceba0acdfa63f4db7a6ce4e21d3
e7d9bc0c2593c6fa8137da5beead61a6db91f70d72bb8ea986deab2a1bfa
2139fdab0f36e4026e457b07174be4b3a8351bd3425bc06e8d87e6597695
409b77be9bc6a237d6675f3dcd302e6de0e0b9c6103a60ed340fe589ffdb
1bd70d9442893d84b319b824d334d6feebc58eed622beee3853496f962a3
44058b5e68ed3955f86765ca9b21ecbd68d21a0b8ca20e94068bd6b65b7b
6369a1764350c87f81393a7e036503383dae42328b63e732fc39946cfc47
fc3dba9323fa2943d71352e564be40d26523044cca70ec120bc04338ddd7
71540357e61201788556932083753a475aa76178a8859e9ad4801ec83922
b15bc5f4038d963f773fe96798d1f3633a8040d651317ec6d40091b789c9
fb3549b8a7f9e9373cdc517c1fe08a99633da40296de8af8d75a79f13eb4
a20102b147bd635baeb3ccf74cc6183cf1feec98b476c4330ddd35738436
bdec31d14e6859a132e6a1e0b625cb24c5fb0b00cb59b0fbcf00afded1d4
237956041509939ddd1e5c72d9cc6b2808fcce23b9901f5644014adddd25
cf8ccd6d181d73067626c924dbf25495b2220ea643a2fd2b546b6fda1dc5
b1b38fd03e4bbfb7b539f87ac98ed61e6fd7b79ece5a7ec44a1b58be76c9
1f8be68836c9bd345247f84d8ece03655f8306eb078ae258c44c0dcd1fc6
9f7c299f16f3ceabca68f25d80747f7283e63f287b50ada64cf7b22296bd
ad607930d257d247ed5ff1de87df0ecf8440803885088dcbcd9b47102dbe
a520c6de080ae57293b437ca06544891e5fc0dc599c2a49e1239c2c5db6e
7fd2024208da7b0c8a9c9c8ed1d9d078465f9c7976afe6ff68ed1add9c12
a2c6429adbcaf21e37148304a8fff86e8d98d00f542aff7e25dfe21651c7
58d891e726eef01d923ec7664147b9862ca53418f447742816fae60dda13
5f353510f58413fbf6677cdba092c6796ef19ef04ec96532a080a9cd5dae
0d6acd78b70652eea994a552b1c683ed144d6cea0b903c8b42dea5ad50e1
ea90dba900b3b014dcf7203ed5375e530031bcb9cc5811214466e50cbc57
dc8677a67c4f7a82840dfd48b57604c8b12e7b53c0b83b866da7db63d2fc
abf7cfb07ffc8fbb7505a9e9fa39da353f8c47740c29114e6487df5ad840
cec63c9683bb6b366cab91056db3c0e32549a85240c2ab4889a9b359d583
1d0fc87ce00b27e3c9ae656f82178a6b2e1080b35502c18c8e36b33df7b0
4e893201bff0a0ea1e867a73141d0000d5d45775849e0f6fdef389e510c9
55bab2dbd6dc16294a38e8d7a264165d11a5ce9c60b755874be99f4526f8
fb77ccd62e7723b1d8249b3bce6cc325f92cc8bce9e5f813aee7689d951c
dc21c7f1633088979be65e4cacc9b00ce2d4191b0b9d1900598c79c5938d
7274f1a6848d14d8e6923a0f272ee263b7a9dae3fab840ff92853467dc3c
0f2fb068f3be2a38b6d7aaec53858197d177d3e2ce658c0c09e5da54e975
fef0340f28f67326cd1001c916e7ac3e45955e681876545192a0799d4e21
e0be5b332ff0267e9b904b12d46ed020c9d1c9b334b6605a08a8502f8d1f
4d720e1e2a04c5c2840ee3bdae19bdd38cc64903797444b6937897896dc7
08f824daf929ae7fc50d52d40e10d094f636291a59a47e32d43d9bdf23c9
6ef8bbf3a1dff41ba37ade372fecc9ee23cb3db6ea3b43969b9597dcf3a9
de5a8511d695771ce7155fb7f7fa1423f1e5ff3aa7560744f34e29a4b657
733a2efe10a1e8c2ad056feeb975eec4a5c4249b79a15cce1ddc807675d9
9e5a66b9d63b31f010b3faac9f8a6e84993c5a612b01f60ede2e3ab8adae
3b1df9c9ceb69d693290d273ddaa0c47fc200306aa002835bf514f836dfb
f343892140d981858d8c599dfedbaf388791c4547486cdf303862f2c49a9
c11bb70d41fd7aa1f4fd0c3355cc9313a77e7a92fdddf855ae658f3fe09c
8365754639fa716ce477b327d138bc1081d4e9614fba03c0a3e3cec7ebc0
d48200450cf5c60af97eb3f414566c775679491ae3b11b810ff095fc7e3a
725fed0be3ed85839cf94a29bfb61fe3e9de6c1f044576136050803208f9
5d87a310c61b55d8b41bd9c7c9be357c2cb14aea5795aa98444947972004
f685d2abcc5b596845e635dde210ba41580baa3b0dd8f31f3ea9c6dd53bb
94be76d2f6b769d4de85cc55c2422e510294f9aece746af47ac452358d6d
fe74ca0760793af8a948c69a0368da229d7e5a4062df5b6cc8981c213b8e
eff7118d7ee1f32d3b5cb361446f65fbe4c2587c062be89323cf557ab41c
c4abe3e0148e2ee2d9d3b332ce146a771422e574d137b471eca3c7762f42
792a7fd755e1be90b5c581cb81a620bdda59b7a98670ae3d46fa090ca728
4b9f3fc315917522ed1e82eac4d319eeb7e073f9e917f355c5a274c3759c
c1ab2a13d96404deeeca5295fea13c9355bc51d8bde5fbb30731d81d8a1b
1a069a134558a50dabffb2241c969d66f09dfac6f2f671c05230382da361
910a19d711a22bcc240bf18abbdb7371f3fe900a8da4ce6facd626bc3242
c867111f59e52d7342adcdfdce381cd18139200783b245d06ff05ba151d0
895b0352d6e261876517087cdbea301d04e9deb6d3b6932abcc1126389ea
ff5982413686df596e59fd440581721cef98acf5827d36c34ac14c42bdac
8044b1746ff6c95a20632c707014dd1a335b994c56b1fcba79eb8b6d26b2
126516a39f265812e2843fd61aac4452ee19821e7e3338edc699243813c6
23a33a688d99e7b0f7c22fdc60750a66260f5dc3d172a2cda4c53332359b
80bc681eda518e1d20488ede8eebd582299e9dc2ade27868a0a84470fa61
eb2bd75ac6831da47bd4a0449437a3c3a90bfd6bd23a31a9bdedfaac537d
a0a8df4cd2e025b41637da46338cec460a2631f6d3ad4328518efa12d3ca
eebd0281ff496cf9b5c414f19d8027211eff83b50c7de813e6b7be70c02f
2ad87669ed1ddfbeaf4e39a32614ac3c5ee64649c4c21f421bd527eeb3cd
eb631a6a34f0d725c43161194a03d3980a14e8ab2ce7abe277481b40596f
7e202522125210f6d459e653c1b84da29e45723143b571d9286d84a477f0
d21406751d2decc2fa32e9e5b353bc2855689c9c122049bea9c0efb05242
23440847f894bb620b2d99142cac4e1a66e8e5f7ca3391bc7f78928eaa2e
b24d75a655a996f99fac56ba9c0cb80cb30716302a4329a60dd8aed2e717
a506a42680de7e799ec63bd08480c8df62df02d85f22dbc08dd1b5e5681b
92605472ee6a40f6a69741447342c77369c2a733d8416a1be21447d5d4db
041a6c794bc47eca0d80e2c017d6725143ae1752fdcd0f4d7d907ec08f5e
8adb0e98aa8ee89cb4d17e3bece25ad916ab94d74c723429e23ec0f1ce44
572af14b662728c975387d9eb119173bc1ac61864d24a98ee89cb4d17e3b
13e649211a975ce974000f0468b4bae5a6f168dc0f9e1670b3d377803db7
20f2b352f6a9fc7fbc2d9dbba1bdf1cf448773b8440f2fe2c4fa4308e1ec
ba97313ebe661f02572f0d16464fb26602568bc87422f32486cb538df859
7b273bfa83cfaee8fd5be756940c27d60f01571b3427e329c36d4c5dea75
81f5a0e81ab0f7af17ae5ac86e6d63dc34eb796fedc1d7928ed767b75ccb
8b7b022bc5fa208a439db98f8ba674410bf5f22c14d80d4bbb240de7f5c2
b60736d85863e9d7d992b434f72f3829f24667d51ee557f524a511f24b07
a99eb13c4bed7adcce6acf107e6b6d8685de48bb3ce97c83598a2c1b8eb9
acded01638a03bc936d10768ddef192d5cd21bc5fb48412608875159d139
04c212ed8327c1b97a58efdc70537b8e4c591ddb4c0c0529054a71dd9eb0
5ca10e0320b8029d4942b96e4e190005c60911820fbef2f0941bee952e7b
1e3cc0755ca75ad432b4cf0731efe645581d4d7e0a3fa752f61611ee4830
f2cb0e2c9c3f8872a8e29704939eab09f8c04db6d6f64f3f3bd0a5676170
04f08db1408a8e4ab27366c34908f59555a83b148e3252d01deb53d00785
aad4e6420015f41751b2d77cf3e0cbb03abc4c057c12665c8436e50cb2fb
480d056d522aac4d34a401ee5bd3b97a0551488ef61c4177cd2c0185e3da
8f99cef9524e1fdbba805a5ae2bf8a26fef39bc2ac08cafe606ea043327a
b975c959948998cd4c1aab71506e941dc1dfa28f2111b7a11e44d6f2154f
d1aa014e14aaa531ddfdbd11696e0503699e72fd03826307000bd3c3c8d6
ffc2fa3fecd207ac867f0410963df700e4170665cbc17f13f1e27e2ae721
d2f03132b88b535b961c1462fed89db8f8303512223a4b4e8404dd438785
aa18e8fc9e5d94db0a3f523867028c892b3d21f0fb417fb860480c1d52b7
04ac9472c9f0a6067418342163273d694e6dfa55d5454fc1c2d52c459518
0a48e023045a3d6c9246d093c2212d61bfc4e22308c2f681e72416e028a1
aab7962302ec1d42a83971a7e1b7e5a35bc26d20c158e5b9ac1ee008e223
355e1330f122f40dd94e4c6d5eb0fa0039f23832e70fe80dd18718c59066
bad5628daac0fd7b7721e8a6b6fa6d12c92e1c85a01b14830b5f183821c8
c3b3a8863d964cda7d8d5d3e54997448fe7736fd1347bf41810020834e7f
092223ecb53aa9519bacb0d6016f8fea6e036480a0d47c4bf4df2f9cd34b
e5169a34f4d67746785fe2097b7f97bebf162c1ce999c9f2ccc9ea5031f4
b86e67c212b16d5717968a5e0d53c396bb2e2d5d50c0561285bd9c4ef503
094319f08ea2be7589449fa9fe0cbe915b1d78cbce807881f793a5f96929
6a08011f10de19473e4381ad696a7a749baaa3d6ce5eab21158984c9a603
4c5dc85bddbb3defe2d363f16ced25383a20d4dfed378319d80bc407dfb6
c5e05e8a5fb8fedc118894ab9780844241eb4a6b6519d49611009a425f60
a1fcf4a9a6927ad212e1b5f9bc99b5d07afbc931e50d06165875dc42c8fc
92130127b608dd59dfe33c06bfb267ee0b3b9cd72e276c4fcaf91b8c7c9e
d19f6412bd81fd2a2b0808164c565727300a40919bc49e3e522bf4b566ea
392aa0f29ab7027c24b912409f522b93b930e07b87dcd6d1019207f96409
cfaf0cbccd5495f1dfad482c3c72d02c175a54f5bc065519d6882c4bcaab
dc2d71ab21f766159048a5fd3baaf41b96769a1dd8af610ea6fd9cb8ee85
d0198407b89f9612bcc2a677b14d1c5807d222fabe0daac41aea3dd0cf32
2f1c690ca35fe5f47033530d7684647a4b938e7b642bcc9fc1ae40de58e4
19a1c93a2221f5915c2a9ff91aa0d6338f75f19c21d957a81f2fdd549eb6
f72986070a5bd31d29ee4559a94acde8245ef8b890842eaa75413bfc9162
84b433c8192a7c631ec3adf4e0075916a1263b363dee4c0524dff636b57c
d1d7fe8eaaf0f773ebccf3957768d78a860f0c393cafda50811f0d615c9f
d56a57775c852ec6147d67a1a7319b4141381e8fe00235423fa9fa27c30e
6b4408fae433de563bb71c7a928f49a496ab18b03883413dde2aa4ada91a
94492b26f5e9b3e9e125acd0ec2ce9afc9881ed7881ca904062c57b5909f
4bfd74e15d022c4585c7451926b548e74d92dbca9da444dd6c08c6bdee50
ad19931ac3652d9d993616d67fd061a09212e2d51e7b536a075a598109e7
351ee289ecd9334fadd251dc16992cc2e39090185baf2a891bb4243fa63a
eaa378d58571e4e3258f5da5939bd5f47b267966e06be1d5f8e251f1b7b4
33e3fefc22db2d15d953d0474a283a9435a7dc312e4b6c0b0027e429617a
3f8238f75d8655e88a381490e9e94fafbdb49866c94b0546c26f466e9069
dbafbd6543559995bc5f46f9a3abac201a820bda84bf6342ef82305112ef
9e1e4a4b30870ee47ec096b065dd92c9a75dab8d434e4cc5e6b42f535c23
a887fd9894d3c5eb8e588aff43c5c6c3873227f1e70d1e3a6a7c8af587b4
d99608bb62a784f6a4f10e5c89bd2de6a2cec18d88f93ec19db0aba5053f
58edad3d8f0fa464be5b62d006ecfa13e665f65e758612e87085285a21fc
97d191b4a54c94bba9e60e8cda7562716d96ebf27edf5091867f09e66b67
9dc0543ecca7770f75f62cda184b1931a90c5817e96fdacb37c4278f3ca5
119f243e9380ef9da1c62fb90d31851a43b73ca8afb3b29d338aafcd78ee
00f262fc0d77b323cd1d4bd99ac54c7812815adbd496ef1a50f03df935cd
450c3dbc203bc36138921c904e6771ef7382883dba6e7dbe943e04b2def3
0823192e084822ffa48b0aad40f1059be9a57b5d13c845c6b72c198076d4
fa54506968b1e98299d6b9d8597e1f5380346ea891319fffc816e4df435f
816710af2e6d0cb0bb654889994bb15f682da1c5e641ecaa089bbe2bc519
ffa10b70909a6fdac76a3eb4186f8cf20055c1cbdbb084d24fb161374117
8bf553787468f2a4a0c433aa0c53178b209d520efe4e7bd7b467708bdc2a
22f9d62fb7429a61064fa2c1aa851cff760b45f89f1acb7491d67a960ca4
6a10694d63abce8600bd2a91127d5a1615df8239dd4c2c195d91cba16877
d51a8e2c1be55ac9231ab2713ff43935bbf24dd18c1819474042aa600fa9
0b70e3e8db1f40c72865ce149298ebf8a09f726ac21642b76ae38db0aa4c
f8a18a93acb85dc982ed59defaf1b834c004fc9606cfd1fb155f59da6846
d86f1198e6892384ebdc2c510047da2eda996c88f4f8d79afccf75165076
101fd5c458cbde9c78be9c6241ad59f4fe786484ad1b4e575062e169bf30
1c687f439a591af24957005bc89279bda103a01325a52480a302aa9c56ba
f17685851e945c7a0dcb579ddcdad4ed7d48bac24abacbed5f0592cf6aa8
224f46e90104ab2dd6aa4563edc1fcc79962caa34a2089e3cea58bb17051
033a70d4b523bd138b8c0309a9e0ecba426e15c45809fc5c2574900ba3ad
bac4ac9cdbb25104f1442211a27b831d0035bfe7335c8dade92dfcbe45b4
70f46dbde740e28f45e9605207f2641ed63c94f2f07ee021ec6ad12a5caa
9c50aa6ce12620b109bc308d8210e8dd8bd9a706988fcefba7cc341d59e4
3708e9fd462ede8637814fcf5e659419bfedc9ca8f6c5173489fd9c7c7ad
ed3d3a31e0f842eb763ceaa2ab0c9a33cc9d91c34694ea2b4624c215c4c8
a002546ff2d67808a8343e99110faa90659b4e2c6fc51516cfbcad9faa60
a9e5d02b33c844ef010e83ecf47f26c02a155d2926219e7ec52aa687307c
4016b35ac094f36502e3e4c0e52f16344a316b5680dc2f738c3791deec73
462ecf893d13046684fc50b454b7fb608923fc5f61305e164f087a5b4cf3
994bc6a6100298d3b80e8e0f5bcea6de815873fe8a9c2a4cb91cdf503329
59decae992710825b346f91b594feac7136782c604dd6deb2c3df01ae658
64ee90a2a4194e9641ddce3def1387a4b2e0bbda39c020c6f96a41020326
6edc70fd6d115b40e7635615436310e922a65846730da31ac2c01954087c
d018345f3e0838ca43ba2c4a1578f026c3f08cd5070764ecf8de01efc856
482584dbfcfa69af8513044c351293dcd3c2f4959b2c1da96256d9c46b56
e3ce6ea2cd6b745abf8b4523eab6daab4a61e101a63209c493fcb6cef634
6d7f69c7ed89eb4e75a28bea86cebe310682ba4fe9648dd29b689fdb6077
e0e29b6b8d94aaec25fc7daefefe20b6a93002cf2d907754b20e8b3859ec
29e553fc33c0bdf4c2a17188bc40edb77cd6dc683ae2d10b9ba3ce3cad23
e790da9d71c8031c533a2f74faf8bd2003db63b7a8128a0273bc93291f75
aa1fb49ddb67472584e2442f79618b751073f274abc1c0618bb760e73ab7
650b334c78fe9e0cac14e565b87af896e1ab49c60bafd0d5db6370e9aac7
9888e3c59fa81f2adef65af4ea96393c8694f9ed9a1e2c800d00cc31b421
b83b017c9c0d63906ccc3867cbb78c293c61d416035dc91397d6b3eaee9f
72f8234b1eb8125996e35080484513e4bf60c76db2fb137fe6f705cfcdb1
a54dd61c21ba36e48a43376b3b31ac5f949dc658d60f588a9763151bd1e8
8df6b4e4d2ee4781779a951595cecad459bb6adcfff04035e59264fe4813
2323a1a88d8406809bfaa305b6c6854ea7487ca7c33eee5b48827e620021
25d28357149013583354ad1f9269e0bd8e76f105c0e5f65bb45a22f9e685
0508e0139541910aa7d2058287e94fcdbac310b44bbddfe124d2685b2c55
0f51bbd50432e5a6fad37820d3e308fe68491870087a644aee1ea003143c
7a9936eb488b3066717eba9c86e4dfc4dc4003d81edf5574a52c10728a94
6169d4582d9deb28cc4d3aca99417a4041a6e9aede1b5f18848579909565
902c98e7d7d7c23ce3a8e2c7a74997487b10bb874b12ade063439e1177b7
6383607f356742122af671d3f07aa41c0e679a777301b975fbc5ae977dce
62c427f968862a630d2b6b027cf7fecf43f144298cbcfede06fc820ccbcd
c12a7ebf5d599b99b12bafc0b406616350863d62d9ee8948f4a68545058d
64b1abe1dcdbba173da4fd0844ba46f7c34fd9c69d035c2120d177c227bb
8f70b25c7e5fe675eb108c59bd89a398a89dd151181002f842f98f7ec97c
5fa3358083f3d64a59104eb2b0fae8e12a1fd069811e843b5a1fa8a812a0
f6a78609558c063c073f10f8ff0d1d8838b3fdf34306337927bc12e18b99
047a80f756c417b4247f09cf662b769ffcd9b6c598331645fd50743f16f3
850571c7c031262f3ab4c14ffb628519c9e4b0aff844d47a399022c93fe9
f201efc8341c2f5c1cd33da6696087fe4dfea8c8c1e8d4e2eec53a5de9c3
c35bfc19bea090621b0b8973d02359f956e3d03abc1c7d60b8a3bddc9c15
d77fb38c9b7f550255931905aec9322ef55de335fccbc073f062c7793147
104ccf6606f8c23c0cac56202e4eaab55d508434803aeecbf99020cdbc58
cf13da844f0f9f2bbaca80ff5cea975355efdc3153c11b40c45f6777f967
babdabfc0cef0b9a80248974edefa22379ce9c5fb7849e1b572923668e04
072c4dda839f7a613fb8bd82bea10df27ebd0d3394e9f9f8781aabd2cbec
9b5cc167bf1f3c07692253fd4a4f97d622be3e2c4b7269eed131496ada23
106cd033a5a6e043055e8699ebd3b6fab84463d3d5628ac8a52e8b716843
2decb1e95727a648ef879b020bbf3a03ab5bf484a875221ea069615810aa
09106726fc8a97e1c310bf860d996969e7ac7857ac6b781421344dd5585d
133bdeda02e197806486c96942137b436d16831b407aadd323d9cdcdfa7f
e25ea7663895bfedf53c87b852be2caf0adf4cde470f8dc9dfd7268acfa8
86cc73029e43cd694c75595a368eed9003aaa58d09737ffc90b388cea6c9
a6e0c199a274f5caf40ea7edb4a70181a3fc3c152ef54a91cdaaade34ddb
9d7d0466eb93d7af6ef32acb42e376e63c3195bf7caa63c9e8db872409b6
a1911fa2711df054fe48a4ea33f1745f9d6581443784f11c0652dca673d9
aa86056bab895a0732aa94c3b07f7ccde4918069aa53266732fdc1a3222a
c313043e9ccaacba6065dacdc8154f002160fb261f6c01fb4f966ae481c9
d1bd61d39cabb867a172f64f2afa90c3f6acf60e9e8ad77ee5e38bb556cf
a517c3f9ffd20e7942291cb73192941313e565761069e03f4f45b2640843
f75a531de167fb83d194ce08be021a378c29b251a0bd02b79c4c6e2dccf0
07fe1c656495bb4f6396f866f5172f3be6218f05b07b9f7b0303a275fa3c
14e47757de0bc54de2b6f685a4afb0534ca4c3a22eb42727f1d186b15cc5
22677cc44cf86538666c096f3d699741ffcc0c231abd41f9f60c0c9934f2
8ef003b166619117a0e1293df738b708a0167a9f7086daac46ffe7fb3550
4276657df9dab95834b9e6434f87cbaff9c1716e252d3962ed27edcefaf3
0afc0401364da5e02af9b008ff256088489ab72f78a896df61ba211b40b5
822833e1b1fb8b9735e6571a838ca036b120b49ec18fba4a4991f7c6d82c
ae8df6f95837407b356098b9122ba13069092a74017f40f99cc11968ae0a
2a0a398e650caebc8d59094907a0d955ce3e24d6a2aa0702d553ef95c2dd
fe062ee9641245b430fb8f7aba81a280f29eec6988d08840bc3bcfb6a522
a9027b09df788fb08db4531c5c8e0035f9deab6316e3e95f4137ee7b7039
8a7ac55f7a76303bb00b7ec8ee33854c1627c07d82fae3e9645fa474e482
2533f4641503ee06fd6133f3ee1fc923f460ca41a99b2b43cd4ac7b26746
2fd8bc94c034f3e811e0f8b37376d5fdbe2f958a0992ad27028de209cd0a
2bda89e80cd922fc516ecf0f8df8064563add0cdba0c77f48dab3a2f4deb
accf066e3bac525a6ef89a8990071e7817daab5707f6b871e9208b4dc339
c7dbe45cb3a77237bed63cd47d17f2f59154ddd26ef8f49826762ed2efbb
59352254ee874b392a8caa70e2cc8cb545ec79671c737801ac9529913f8b
d276a5e8a4cf83494a86097247dfdf8527a002192e931dabf0b3867ef887
9d3f0054265585963703667bcc3afbabf31849f4635c3f4e9bb5bc50207e
5b60f200fe773c317853879b6f39b1cdec57cef74f87ade5aec540f986d8
b6e87e76f1b0860bc9c0b8d9260c3746c3375f259e813f946e76be23a8ee
b9786c36437cd1ecc987a576b2901246e3bfa80cc1e5dca9b5aa4d43bf84
255ea50bc6356aa9c38e9e9c548b9f8c184ae3a217fde69fef206cd99500
d416a33f2167e6170f5c82cbde805ecd66784a7bd5c64611665d936674f3
a27d410520c164732da76460a55f02610c2060b1e29b2812ead9aafe46b3
7e43e107630ba7d2c2c1be407bc8e5cbdb6f71de0612e702e7a3120485ce
d0b5bff74790d32400b91448f6d9ca018b6213be6540231992eeea9b85b4
aad5c7e821d198be6a492262fc14ea618cf2c4d9c3c0555cef007f7c7164
0132d5105ceed38cc1e0e22ec0dbeb1c5b191f2c3ee0112d81214a0ecc45
f35f2055a49c00515f147ef058b8c4fb232272f9c0d7192b7b147282b00c
7a4bba0eee1441847fbdb253d8a52f8d537099c283cd385691ff4bb9c2c0
7311fe4d74e224f5d0134edaa3db0125375076d4c5c347522ec1bac2ea43
4bffc1149c103ef1c7ac8243e9d87e664097716a131d450ddf350e6bad50
d5ccea705f8a6d9e0776296e339f3dae0c07feab881beb67619982346748
6770b21c8631b912d9ba557c51347f93f4cd107bbd7697f1120010ce7b77
e2ae548583d46305dc9ca332aadb73b66548602b97e5b594011c58c1122e
6f4daf108288f754e28a48c1ce348f0dd4c1cf8e4da5c319257f0dafc0d9
04e6ffd2f04eb78bacb19a8b8e683e483f48576ce8ab22c01da277414d66
5037a7f2d2a01f0846956a04c0ede1bc9d7edbbeed1e02e23b3d0b808b96
b2cc36a4536bdc341b7a563436acbc78fad882b4eaedf7a51f23492a9ff4
023e1d0ad14a4a6655118c123359589c8540bcd248ee5481fd7af6e8ccd3
7b822c5af068dafdb11e123654a0f7bbc9fd181aad678fe336ceb5d7210e
52e20e3d9650fae3bdd7f3079d5da4054012bbdba9d03143c969a8f4050c
2f528b36a23c687b25736d5859f3bac53012050f90edf6bca7345bd461ee
5b0f435e702ca7b79b4f003d63b954cc79c01734369bbb3f7b4a36a8090c
4bdfee55876c57ff338b13a1dacee9be9d5c3683c072f486122eba6711bc
75e3968028652bff19fb5232e0301e40b93fed2a4805d5efa46d2c01f53b
2140778991a97f158d3f79e9cc48f1be32ce2085e56ab4fe3c06a22c0d18
8dc64c448238ceee301c4aaf501daec817d3ccb0422dd2ee7e0b728ab54f
114ae2e4d79bee398fa277fad0db0f75a6e967d4a37020a2f150b962f010
fd4fc77d3a42a1e3cd899051e64dc236eb3944ae195026071baffb03ca95
0a01141c32e210d1a3069162f1b1b361ee8a8dd8c6833fb54056a3e9aab8
0c95de269fc00be8cb36a68d011826b66c4f2ea896fc3eaa74503c78481f
f07cbb61cf97163a1e4f0b4cd1b9b6b86df186b2fd319daf9a3018cec10c
100ba62090ea6c3f6c2f545548aaae99dfb9a68624e7812f7fdf9f527e55
521745d934463e000e2c5bfe44fa6754d902f9c1bb954523841864d9a6f4
598f9fc4070a3296f76b964d06b2b2a87202b32a7d7e7a519fa26dccb4e1
6bb09a5638f249fb2d53f292f3dd94ea2b3739bf4bef7e765198b109ffdd
d8193df22b81036be36d03120a0cc8fc87bd1fa7b4776d02ea9563979245
79036f4a4f77cf9e5cda19b6bb90c5fec61f0d374d8fa91790862238f3e7
7a106b186fe39e9e728b9b4d0eb0dcc1055f1c0aeb7a78299512fb549097
bb01995d1f

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndDocument
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:   -28   173   640   618
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode -0336 7416 csm

    0     0  8026  5336 rc
87 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 8027 5337 rf
6 w
0 1787 6221 0 0 -1787 1042 2221 4 MP
PP
-6221 0 0 1787 6221 0 0 -1787 1042 2221 5 MP stroke
4 w
DO
SO
6 w
0 sg
1042  434 mt 7263  434 L
1042 2221 mt 7263 2221 L
7263 2221 mt 7263  434 L
1042 2221 mt 1042  434 L
1042 2221 mt 7263 2221 L
1042 2221 mt 1042  434 L
1042 2221 mt 1042 2158 L
1042  435 mt 1042  497 L
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

 959 2366 mt 
(0.1) s
4153 2221 mt 4153 2158 L
4153  435 mt 4153  497 L
4070 2366 mt 
(0.2) s
7263 2221 mt 7263 2158 L
7263  435 mt 7263  497 L
7180 2366 mt 
(0.3) s
1042 2221 mt 1105 2221 L
7263 2221 mt 7201 2221 L
 772 2265 mt 
(-1.5) s
1042 1863 mt 1105 1863 L
7263 1863 mt 7201 1863 L
 872 1907 mt 
(-1) s
1042 1506 mt 1105 1506 L
7263 1506 mt 7201 1506 L
 772 1550 mt 
(-0.5) s
1042 1149 mt 1105 1149 L
7263 1149 mt 7201 1149 L
 942 1193 mt 
(0) s
1042  792 mt 1105  792 L
7263  792 mt 7201  792 L
 842  836 mt 
(0.5) s
1042  435 mt 1105  435 L
7263  435 mt 7201  435 L
 942  479 mt 
(1) s
1042  434 mt 7263  434 L
1042 2221 mt 7263 2221 L
7263 2221 mt 7263  434 L
1042 2221 mt 1042  434 L
gs 1042 435 6222 1787 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -3 31 -2 
31 -2 32 -2 31 -2 31 -2 31 -2 31 -3 31 -2 31 -2 
31 -2 31 -3 31 -2 32 -2 31 -3 31 -2 31 -2 31 -3 
31 -2 31 -3 31 -2 31 -3 32 -2 31 -3 31 -2 31 -3 
31 -2 31 -3 31 -3 31 -2 31 -3 31 -3 32 -2 31 -3 
31 -3 31 -3 31 -3 31 -2 31 -3 31 -3 31 -3 32 -3 
31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -4 
31 -3 32 -3 31 -3 31 -4 31 -3 31 -3 31 -4 31 -3 
31 -4 31 -3 32 -4 31 -3 31 -4 31 -3 31 -4 31 -4 
31 -3 31 -4 31 -4 31 -4 32 -4 31 -4 31 -4 31 -4 
31 -4 31 -4 31 -4 31 -4 31 -4 32 -4 31 -5 31 -4 
31 -4 31 -5 31 -4 31 -5 31 -5 31 -4 31 -5 32 -5 
31 -4 31 -5 31 -5 31 -5 31 -5 31 -5 31 -5 31 -5 
32 -6 31 -5 31 -5 31 -6 31 -5 31 -6 31 -5 31 -6 
31 -6 31 -6 32 -6 31 -6 31 -6 31 -6 31 -6 31 -6 
31 -7 31 -6 31 -7 32 -6 31 -7 31 -7 31 -7 31 -7 
31 -7 31 -7 31 -7 31 -7 31 -8 32 -7 31 -8 31 -8 
31 -7 31 -8 31 -8 31 -9 31 -8 31 -8 32 -9 31 -9 
31 -8 31 -9 31 -9 31 -9 31 -10 31 -9 31 -10 31 -10 
32 -9 31 -11 31 -10 31 -10 31 -11 31 -10 31 -11 31 -11 
31 -12 32 -11 31 -12 31 -11 31 -12 31 -13 31 -12 31 -13 
31 -12 31 -14 31 -13 32 -13 31 -14 31 -14 31 -14 31 -15 
31 -15 31 -15 31 -15 31 -16 32 -16 31 -16 31 -17 31 -17 
31 -17 31 -18 31 -18 31 -18 31 -19 31 -19 32 -19 31 -20 
31 -20 31 -21 31 -22 31 -21 19 -14 1148 2222 198 MP stroke
/c9 { 0.000000 1.000000 0.000000 sr} bdef
c9
31 -2 31 -1 31 -2 31 -1 31 -2 31 -1 31 -2 31 -2 
31 -1 32 -2 31 -2 31 -1 31 -2 31 -2 31 -1 31 -2 
31 -2 31 -2 31 -1 32 -2 31 -2 31 -2 31 -2 31 -2 
31 -2 31 -1 31 -2 31 -2 32 -2 31 -2 31 -2 31 -2 
31 -2 31 -2 31 -2 31 -3 31 -2 31 -2 32 -2 31 -2 
31 -2 31 -3 31 -2 31 -2 31 -2 31 -3 31 -2 32 -2 
31 -3 31 -2 31 -2 31 -3 31 -2 31 -3 31 -2 31 -3 
31 -3 32 -2 31 -3 31 -2 31 -3 31 -3 31 -3 31 -2 
31 -3 31 -3 32 -3 31 -3 31 -3 31 -2 31 -3 31 -3 
31 -4 31 -3 31 -3 31 -3 32 -3 31 -3 31 -3 31 -4 
31 -3 31 -3 31 -4 31 -3 31 -4 32 -3 31 -4 31 -3 
31 -4 31 -4 31 -3 31 -4 31 -4 31 -4 31 -4 32 -4 
31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 31 -5 31 -4 
32 -5 31 -4 31 -5 31 -4 31 -5 31 -4 31 -5 31 -5 
31 -5 31 -5 32 -5 31 -5 31 -5 31 -5 31 -5 31 -6 
31 -5 31 -6 31 -5 32 -6 31 -6 31 -5 31 -6 31 -6 
31 -6 31 -6 31 -7 31 -6 31 -6 32 -7 31 -6 31 -7 
31 -7 31 -7 31 -7 31 -7 31 -7 31 -7 32 -8 31 -7 
31 -8 31 -8 31 -8 31 -8 31 -8 31 -8 31 -9 31 -8 
32 -9 31 -9 31 -9 31 -9 31 -9 31 -9 31 -10 31 -10 
31 -10 32 -10 31 -10 31 -10 31 -11 31 -11 31 -11 31 -11 
31 -12 31 -11 31 -12 32 -12 31 -12 31 -13 31 -13 31 -13 
31 -13 31 -14 31 -13 31 -14 32 -15 31 -14 31 -15 31 -16 
31 -15 31 -16 31 -16 31 -17 31 -17 31 -17 32 -18 31 -18 
31 -18 31 -19 31 -20 31 -19 31 -21 31 -20 31 -22 32 -21 
1042 1907 201 MP stroke
/c10 { 1.000000 0.000000 1.000000 sr} bdef
c10
31 -1 31 -1 31 -1 31 -2 31 -1 31 -1 31 -1 31 -1 
31 -1 32 -1 31 -2 31 -1 31 -1 31 -1 31 -1 31 -2 
31 -1 31 -1 31 -1 32 -2 31 -1 31 -1 31 -2 31 -1 
31 -1 31 -2 31 -1 31 -2 32 -1 31 -1 31 -2 31 -1 
31 -2 31 -1 31 -2 31 -1 31 -2 31 -2 32 -1 31 -2 
31 -1 31 -2 31 -2 31 -2 31 -1 31 -2 31 -2 32 -1 
31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -1 31 -2 
31 -2 32 -2 31 -2 31 -2 31 -2 31 -3 31 -2 31 -2 
31 -2 31 -2 32 -2 31 -3 31 -2 31 -2 31 -3 31 -2 
31 -2 31 -3 31 -2 31 -3 32 -2 31 -3 31 -2 31 -3 
31 -3 31 -2 31 -3 31 -3 31 -2 32 -3 31 -3 31 -3 
31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 32 -3 
31 -4 31 -3 31 -3 31 -4 31 -3 31 -4 31 -3 31 -4 
32 -3 31 -4 31 -4 31 -3 31 -4 31 -4 31 -4 31 -4 
31 -4 31 -4 32 -4 31 -5 31 -4 31 -4 31 -5 31 -4 
31 -5 31 -4 31 -5 32 -5 31 -4 31 -5 31 -5 31 -5 
31 -5 31 -6 31 -5 31 -5 31 -6 32 -5 31 -6 31 -6 
31 -5 31 -6 31 -6 31 -6 31 -6 31 -7 32 -6 31 -7 
31 -6 31 -7 31 -7 31 -7 31 -7 31 -7 31 -7 31 -8 
32 -7 31 -8 31 -8 31 -8 31 -8 31 -8 31 -8 31 -9 
31 -9 32 -9 31 -9 31 -9 31 -9 31 -10 31 -10 31 -9 
31 -11 31 -10 31 -10 32 -11 31 -11 31 -11 31 -12 31 -11 
31 -12 31 -12 31 -13 31 -12 32 -13 31 -13 31 -14 31 -13 
31 -14 31 -15 31 -14 31 -15 31 -16 31 -15 32 -16 31 -17 
31 -17 31 -17 31 -17 31 -18 31 -19 31 -19 31 -19 32 -20 
1042 1585 201 MP stroke
/c11 { 1.000000 0.000000 0.000000 sr} bdef
c11
31 -1 31 0 31 -1 31 0 31 -1 31 0 31 0 31 -1 
31 0 32 -1 31 -1 31 0 31 -1 31 0 31 -1 31 0 
31 -1 31 -1 31 0 32 -1 31 -1 31 0 31 -1 31 -1 
31 0 31 -1 31 -1 31 -1 32 -1 31 0 31 -1 31 -1 
31 -1 31 -1 31 -1 31 0 31 -1 31 -1 32 -1 31 -1 
31 -1 31 -1 31 -1 31 -1 31 -1 31 -1 31 -2 32 -1 
31 -1 31 -1 31 -1 31 -1 31 -2 31 -1 31 -1 31 -1 
31 -2 32 -1 31 -1 31 -2 31 -1 31 -1 31 -2 31 -1 
31 -2 31 -1 32 -2 31 -1 31 -2 31 -1 31 -2 31 -2 
31 -1 31 -2 31 -2 31 -2 32 -1 31 -2 31 -2 31 -2 
31 -2 31 -2 31 -2 31 -2 31 -2 32 -2 31 -2 31 -2 
31 -2 31 -3 31 -2 31 -2 31 -2 31 -3 31 -2 32 -3 
31 -2 31 -2 31 -3 31 -3 31 -2 31 -3 31 -3 31 -2 
32 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 
31 -3 31 -4 32 -3 31 -3 31 -4 31 -3 31 -4 31 -3 
31 -4 31 -4 31 -3 32 -4 31 -4 31 -4 31 -4 31 -4 
31 -5 31 -4 31 -4 31 -5 31 -4 32 -5 31 -4 31 -5 
31 -5 31 -5 31 -5 31 -5 31 -5 31 -5 32 -6 31 -5 
31 -6 31 -5 31 -6 31 -6 31 -6 31 -6 31 -6 31 -7 
32 -6 31 -7 31 -6 31 -7 31 -7 31 -7 31 -8 31 -7 
31 -7 32 -8 31 -8 31 -8 31 -8 31 -9 31 -8 31 -9 
31 -9 31 -9 31 -9 32 -9 31 -10 31 -10 31 -10 31 -10 
31 -11 31 -10 31 -11 31 -12 32 -11 31 -12 31 -12 31 -12 
31 -13 31 -12 31 -14 31 -13 31 -14 31 -14 32 -14 31 -15 
31 -15 31 -16 31 -16 31 -16 31 -17 31 -17 31 -18 32 -18 
1042 1311 201 MP stroke
gr

c11
c8
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

3816  280 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

3889  346 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

3942  280 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

3985  280 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4057  280 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4093  280 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4126  280 mt 
(,) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4162  280 mt 
(h) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

4241  346 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4294  280 mt 
(\)=0) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4087 2511 mt 
(m) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

4163 2577 mt 
(0) s
%%IncludeResource: font mwb_cmr10
/mwb_cmr10 /WindowsLatin1Encoding 144 FMSR

 717 1366 mt  -90 rotate
(7) s
90 rotate
%%IncludeResource: font mwb_cmmi10
/mwb_cmmi10 /WindowsLatin1Encoding 144 FMSR

 717 1373 mt  -90 rotate
(:) s
90 rotate
0 sg
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1025 2264 mt 
( ) s
7247  477 mt 
( ) s
1 sg
0 882 1165 0 0 -882 6038 2162 4 MP
PP
-1165 0 0 882 1165 0 0 -882 6038 2162 5 MP stroke
4 w
DO
SO
6 w
0 sg
6038 1280 mt 7203 1280 L
6038 2162 mt 7203 2162 L
7203 2162 mt 7203 1280 L
6038 2162 mt 6038 1280 L
6038 2162 mt 7203 2162 L
6038 2162 mt 6038 1280 L
6038 1280 mt 7203 1280 L
6038 2162 mt 7203 2162 L
7203 2162 mt 7203 1280 L
6038 2162 mt 6038 1280 L
6508 1425 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

6574 1485 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6627 1425 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6666 1425 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6731 1425 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6764 1425 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6794 1425 mt 
(,0.5\)=0) s
gs 6038 1280 1166 883 rc
c8
361 0 6110 1404 2 MP stroke
gr

c8
0 sg
6508 1636 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

6574 1696 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6627 1636 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6666 1636 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6731 1636 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6764 1636 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6794 1636 mt 
(,1.0\)=0) s
gs 6038 1280 1166 883 rc
c9
361 0 6110 1615 2 MP stroke
gr

c9
0 sg
6508 1847 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

6574 1907 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6627 1847 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6666 1847 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6731 1847 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6764 1847 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6794 1847 mt 
(,1.5\)=0) s
gs 6038 1280 1166 883 rc
c10
361 0 6110 1826 2 MP stroke
gr

c10
0 sg
6508 2058 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

6574 2118 mt 
(0) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6627 2058 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6666 2058 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6731 2058 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

6764 2058 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

6794 2058 mt 
(,2.0\)=0) s
gs 6038 1280 1166 883 rc
c11
361 0 6110 2037 2 MP stroke
gr

c11
1 sg
0 1785 6221 0 0 -1785 1043 4749 4 MP
PP
-6221 0 0 1785 6221 0 0 -1785 1043 4749 5 MP stroke
4 w
DO
SO
6 w
0 sg
1043 2964 mt 7264 2964 L
1043 4749 mt 7264 4749 L
7264 4749 mt 7264 2964 L
1043 4749 mt 1043 2964 L
1043 4749 mt 7264 4749 L
1043 4749 mt 1043 2964 L
1043 4749 mt 1043 4686 L
1043 2964 mt 1043 3026 L
 890 4894 mt 
(-0.5) s
4153 4749 mt 4153 4686 L
4153 2964 mt 4153 3026 L
4000 4894 mt 
(-0.4) s
7264 4749 mt 7264 4686 L
7264 2964 mt 7264 3026 L
7111 4894 mt 
(-0.3) s
1043 4749 mt 1105 4749 L
7264 4749 mt 7201 4749 L
 942 4793 mt 
(0) s
1043 4392 mt 1105 4392 L
7264 4392 mt 7201 4392 L
 842 4436 mt 
(0.5) s
1043 4035 mt 1105 4035 L
7264 4035 mt 7201 4035 L
 942 4079 mt 
(1) s
1043 3678 mt 1105 3678 L
7264 3678 mt 7201 3678 L
 842 3722 mt 
(1.5) s
1043 3321 mt 1105 3321 L
7264 3321 mt 7201 3321 L
 942 3365 mt 
(2) s
1043 2964 mt 1105 2964 L
7264 2964 mt 7201 2964 L
 842 3008 mt 
(2.5) s
1043 2964 mt 7264 2964 L
1043 4749 mt 7264 4749 L
7264 4749 mt 7264 2964 L
1043 4749 mt 1043 2964 L
gs 1043 2964 6222 1786 rc
c8
32 -7 31 -7 31 -7 31 -7 31 -7 31 -6 31 -7 31 -7 
31 -6 32 -7 31 -6 31 -7 31 -6 31 -7 31 -6 31 -6 
31 -7 31 -6 31 -6 32 -6 31 -6 31 -6 31 -6 31 -6 
31 -6 31 -6 31 -6 31 -6 32 -6 31 -5 31 -6 31 -6 
31 -5 31 -6 31 -5 31 -6 31 -5 31 -6 32 -5 31 -6 
31 -5 31 -5 31 -6 31 -5 31 -5 31 -5 31 -5 32 -5 
31 -5 31 -5 31 -6 31 -4 31 -5 31 -5 31 -5 31 -5 
31 -5 32 -5 31 -5 31 -4 31 -5 31 -5 31 -4 31 -5 
31 -5 31 -4 32 -5 31 -4 31 -5 31 -4 31 -5 31 -4 
31 -4 31 -5 31 -4 31 -4 32 -5 31 -4 31 -4 31 -4 
31 -5 31 -4 31 -4 31 -4 31 -4 32 -4 31 -4 31 -4 
31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 32 -3 
31 -4 31 -4 31 -4 31 -4 31 -3 31 -4 31 -4 31 -3 
32 -4 31 -4 31 -3 31 -4 31 -4 31 -3 31 -4 31 -3 
31 -4 31 -3 32 -4 31 -3 31 -3 31 -4 31 -3 31 -4 
31 -3 31 -3 31 -4 32 -3 31 -3 31 -3 31 -4 31 -3 
31 -3 31 -3 31 -3 31 -4 31 -3 32 -3 31 -3 31 -3 
31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 32 -3 31 -3 
31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 
32 -2 31 -3 31 -3 31 -3 31 -3 31 -2 31 -3 31 -3 
31 -3 32 -2 31 -3 31 -3 31 -2 31 -3 31 -3 31 -2 
31 -3 31 -3 31 -2 32 -3 31 -2 31 -3 31 -2 31 -3 
31 -2 31 -3 31 -2 31 -3 32 -2 31 -3 31 -2 31 -3 
31 -2 31 -3 31 -2 31 -2 31 -3 31 -2 32 -2 31 -3 
31 -2 31 -3 31 -2 31 -2 31 -2 31 -3 31 -2 31 -2 
1043 4107 201 MP stroke
c9
32 -7 31 -6 31 -7 31 -6 31 -6 31 -6 31 -7 31 -6 
31 -6 32 -6 31 -6 31 -6 31 -6 31 -6 31 -6 31 -5 
31 -6 31 -6 31 -6 32 -5 31 -6 31 -5 31 -6 31 -5 
31 -6 31 -5 31 -6 31 -5 32 -5 31 -5 31 -6 31 -5 
31 -5 31 -5 31 -5 31 -5 31 -5 31 -5 32 -5 31 -5 
31 -5 31 -5 31 -5 31 -4 31 -5 31 -5 31 -5 32 -4 
31 -5 31 -5 31 -4 31 -5 31 -4 31 -5 31 -4 31 -5 
31 -4 32 -4 31 -5 31 -4 31 -4 31 -4 31 -5 31 -4 
31 -4 31 -4 32 -4 31 -4 31 -5 31 -4 31 -4 31 -4 
31 -4 31 -4 31 -3 31 -4 32 -4 31 -4 31 -4 31 -4 
31 -3 31 -4 31 -4 31 -4 31 -3 32 -4 31 -4 31 -3 
31 -4 31 -4 31 -3 31 -4 31 -3 31 -4 31 -3 32 -4 
31 -3 31 -3 31 -4 31 -3 31 -4 31 -3 31 -3 31 -3 
32 -4 31 -3 31 -3 31 -3 31 -4 31 -3 31 -3 31 -3 
31 -3 31 -3 32 -3 31 -4 31 -3 31 -3 31 -3 31 -3 
31 -3 31 -3 31 -3 32 -3 31 -2 31 -3 31 -3 31 -3 
31 -3 31 -3 31 -3 31 -2 31 -3 32 -3 31 -3 31 -3 
31 -2 31 -3 31 -3 31 -2 31 -3 31 -3 32 -2 31 -3 
31 -3 31 -2 31 -3 31 -2 31 -3 31 -2 31 -3 31 -3 
32 -2 31 -3 31 -2 31 -2 31 -3 31 -2 31 -3 31 -2 
31 -3 32 -2 31 -2 31 -3 31 -2 31 -2 31 -3 31 -2 
31 -2 31 -3 31 -2 32 -2 31 -2 31 -3 31 -2 31 -2 
31 -2 31 -3 31 -2 31 -2 32 -2 31 -2 31 -2 31 -3 
31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 32 -2 31 -2 
31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 
1043 4327 201 MP stroke
c10
32 -6 31 -6 31 -6 31 -6 31 -6 31 -5 31 -6 31 -6 
31 -5 32 -6 31 -5 31 -6 31 -5 31 -6 31 -5 31 -5 
31 -6 31 -5 31 -5 32 -5 31 -5 31 -6 31 -5 31 -5 
31 -5 31 -5 31 -4 31 -5 32 -5 31 -5 31 -5 31 -4 
31 -5 31 -5 31 -4 31 -5 31 -5 31 -4 32 -5 31 -4 
31 -5 31 -4 31 -4 31 -5 31 -4 31 -4 31 -5 32 -4 
31 -4 31 -4 31 -4 31 -4 31 -4 31 -5 31 -4 31 -4 
31 -4 32 -3 31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 
31 -3 31 -4 32 -4 31 -4 31 -3 31 -4 31 -3 31 -4 
31 -4 31 -3 31 -4 31 -3 32 -4 31 -3 31 -4 31 -3 
31 -3 31 -4 31 -3 31 -3 31 -4 32 -3 31 -3 31 -3 
31 -4 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 32 -4 
31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -2 
32 -3 31 -3 31 -3 31 -3 31 -3 31 -3 31 -2 31 -3 
31 -3 31 -3 32 -2 31 -3 31 -3 31 -3 31 -2 31 -3 
31 -2 31 -3 31 -3 32 -2 31 -3 31 -2 31 -3 31 -2 
31 -3 31 -2 31 -3 31 -2 31 -3 32 -2 31 -3 31 -2 
31 -2 31 -3 31 -2 31 -3 31 -2 31 -2 32 -2 31 -3 
31 -2 31 -2 31 -3 31 -2 31 -2 31 -2 31 -2 31 -3 
32 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -3 31 -2 
31 -2 32 -2 31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 
31 -2 31 -2 31 -2 32 -2 31 -2 31 -2 31 -2 31 -1 
31 -2 31 -2 31 -2 31 -2 32 -2 31 -2 31 -1 31 -2 
31 -2 31 -2 31 -2 31 -1 31 -2 31 -2 32 -2 31 -1 
31 -2 31 -2 31 -2 31 -1 31 -2 31 -2 31 -1 31 -2 
1043 4511 201 MP stroke
c11
32 -5 31 -5 31 -6 31 -5 31 -5 31 -6 31 -5 31 -5 
31 -5 32 -5 31 -5 31 -5 31 -5 31 -5 31 -5 31 -5 
31 -5 31 -4 31 -5 32 -5 31 -5 31 -4 31 -5 31 -4 
31 -5 31 -4 31 -5 31 -4 32 -4 31 -5 31 -4 31 -4 
31 -5 31 -4 31 -4 31 -4 31 -4 31 -4 32 -4 31 -4 
31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 31 -4 32 -4 
31 -3 31 -4 31 -4 31 -3 31 -4 31 -4 31 -3 31 -4 
31 -3 32 -4 31 -3 31 -4 31 -3 31 -4 31 -3 31 -4 
31 -3 31 -3 32 -4 31 -3 31 -3 31 -3 31 -3 31 -4 
31 -3 31 -3 31 -3 31 -3 32 -3 31 -3 31 -3 31 -3 
31 -3 31 -3 31 -3 31 -3 31 -3 32 -3 31 -3 31 -3 
31 -2 31 -3 31 -3 31 -3 31 -2 31 -3 31 -3 32 -3 
31 -2 31 -3 31 -3 31 -2 31 -3 31 -2 31 -3 31 -2 
32 -3 31 -2 31 -3 31 -2 31 -3 31 -2 31 -3 31 -2 
31 -3 31 -2 32 -2 31 -3 31 -2 31 -2 31 -2 31 -3 
31 -2 31 -2 31 -2 32 -3 31 -2 31 -2 31 -2 31 -2 
31 -3 31 -2 31 -2 31 -2 31 -2 32 -2 31 -2 31 -2 
31 -2 31 -2 31 -2 31 -2 31 -2 31 -2 32 -2 31 -2 
31 -2 31 -2 31 -2 31 -2 31 -1 31 -2 31 -2 31 -2 
32 -2 31 -2 31 -1 31 -2 31 -2 31 -2 31 -1 31 -2 
31 -2 32 -2 31 -1 31 -2 31 -2 31 -1 31 -2 31 -2 
31 -1 31 -2 31 -1 32 -2 31 -2 31 -1 31 -2 31 -1 
31 -2 31 -1 31 -2 31 -1 32 -2 31 -1 31 -2 31 -1 
31 -2 31 -1 31 -2 31 -1 31 -2 31 -1 32 -1 31 -2 
31 -1 31 -2 31 -1 31 -1 31 -2 31 -1 31 -1 31 -2 
1043 4663 201 MP stroke
gr

c11
c8
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

3817 2809 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

3890 2875 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

3943 2809 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

3986 2809 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4058 2809 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4094 2809 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4127 2809 mt 
(,) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4163 2809 mt 
(h) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

4242 2875 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 132 FMSR

4295 2809 mt 
(\)=0) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 132 FMSR

4087 5039 mt 
(m) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

4163 5105 mt 
(1) s
%%IncludeResource: font mwb_cmr10
/mwb_cmr10 /WindowsLatin1Encoding 144 FMSR

 787 3894 mt  -90 rotate
(7) s
90 rotate
%%IncludeResource: font mwb_cmmi10
/mwb_cmmi10 /WindowsLatin1Encoding 144 FMSR

 787 3901 mt  -90 rotate
(:) s
90 rotate
0 sg
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1026 4792 mt 
( ) s
7248 3006 mt 
( ) s
1 sg
0 882 1166 0 0 -882 1102 3906 4 MP
PP
-1166 0 0 882 1166 0 0 -882 1102 3906 5 MP stroke
4 w
DO
SO
6 w
0 sg
1102 3024 mt 2268 3024 L
1102 3906 mt 2268 3906 L
2268 3906 mt 2268 3024 L
1102 3906 mt 1102 3024 L
1102 3906 mt 2268 3906 L
1102 3906 mt 1102 3024 L
1102 3024 mt 2268 3024 L
1102 3906 mt 2268 3906 L
2268 3906 mt 2268 3024 L
1102 3906 mt 1102 3024 L
1572 3169 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

1638 3229 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1691 3169 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1730 3169 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1795 3169 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1828 3169 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1858 3169 mt 
(,1.5\)=0) s
gs 1102 3024 1167 883 rc
c8
361 0 1174 3148 2 MP stroke
gr

c8
0 sg
1572 3380 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

1638 3440 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1691 3380 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1730 3380 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1795 3380 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1828 3380 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1858 3380 mt 
(,2.0\)=0) s
gs 1102 3024 1167 883 rc
c9
361 0 1174 3359 2 MP stroke
gr

c9
0 sg
1572 3591 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

1638 3651 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1691 3591 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1730 3591 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1795 3591 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1828 3591 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1858 3591 mt 
(,2.5\)=0) s
gs 1102 3024 1167 883 rc
c10
361 0 1174 3570 2 MP stroke
gr

c10
0 sg
1572 3802 mt 
(g) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 96 FMSR

1638 3862 mt 
(1) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1691 3802 mt 
(\() s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1730 3802 mt 
(p) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1795 3802 mt 
(;) s
%%IncludeResource: font Symbol
/Symbol /WindowsLatin1Encoding 120 FMSR

1828 3802 mt 
(\327) s
%%IncludeResource: font Helvetica
/Helvetica /WindowsLatin1Encoding 120 FMSR

1858 3802 mt 
(,3.0\)=0) s
gs 1102 3024 1167 883 rc
c11
361 0 1174 3781 2 MP stroke
gr

c11

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%%EndDocument
%%Trailer
